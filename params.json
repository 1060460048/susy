{"name":"Susy","body":"Use Susy anywhere. Static sites, Rails sites, Django sites, PHP sites,\r\netc. You name it. Susy just helps you with the grid - without ever touching \r\nyour markup. \r\n\r\nMelts in the mouth\r\n------------------\r\n\r\nSusy grids are always fluid on the inside, but contained in the candy shell of \r\nyour choice (fixed/fluid/elastic/magic). That allows them to flex, react, and \r\nmove as needed.\r\n\r\nWhat's a magic grid? That's Susy's Special Sauce. The magic grid begins as a \r\nsimple fixed or elastic grid, but becomes fluid when the window is too small \r\nto contain it. Based on Natalie Downe's \"[CSS Systems]\r\n(http://www.slideshare.net/nataliedowne/css-systems-presentation)\" - this \r\notherwise math-heavy technique becomes simple with Susy. It's the only grid \r\nsystem I know of that could never exist as a library apart from Sass.\r\n\r\nInstallation\r\n------------\r\n\r\n    sudo gem install compass-susy-plugin\r\n    compass create <project name> -r susy -u susy\r\n\r\nGrid Basics\r\n-----------\r\n\r\n_(This now refers to the unreleased 1.0 version of Susy.)_\r\n\r\n### Settings:\r\n\r\nSet up your default grid values: total columns, column width, and gutter width.\r\n\r\n```scss\r\n$total-columns  : 12;             /* a 12-column grid */\r\n$column-width   : 4em;            /* each column is 4em wide */\r\n$gutter-width   : 1em;            /* 1em gutters between columns */\r\n$grid-padding   : $gutter-width;  /* 1em padding on the grid */\r\n```\r\n\r\n### Mixins:\r\n\r\nThe basic grid is composed using two simple mixins:\r\n* Apply the `container` mixin to create your initial grid context. \r\n* Apply the `columns` mixin to declare the width of an element on the grid.\r\n\r\nUse the 'omega' trigger to declare elements that span the _final_ column of \r\ntheir parent element, and pass a 'context' in nested situations. The \r\n'context' for any element is equal to the number of columns spanned by it's \r\nparent.\r\n\r\nFor example:\r\n\r\n```scss\r\n#page {\r\n  @include container;\r\n  /* If you want padding on the grid, just add it to the container. */\r\n\r\n  /* \r\n  full-width items like the header don't need any help from Susy:\r\n  header { ... }\r\n  */\r\n\r\n  nav { @include columns(3); }\r\n\r\n  #content { \r\n    @include columns(9 omega);\r\n\r\n    #main { @include columns(6,9); }\r\n    aside { @include columns(3 omega,9); }\r\n  }\r\n\r\n  footer { clear: both; }\r\n}\r\n```\r\n\r\nLayouts and Breakpoints\r\n-----------------------\r\n\r\nThe point is to change layouts (number of columns in the grid) at breakpoints. If you supply only a breakpoint, Susy will supply the closest layout. If you supply only a layout, Susy will provide the closest breakpoint.\r\n\r\n```scss\r\n/* Switch to a 12-column grid when there is room for one. */\r\n@include at-breakpoint(12) { \r\n  .container { @include container; } \r\n}\r\n\r\n/* At a min-width of 30em, switch to the nearest fitting layout. */\r\n@include at-breakpoint(30em) { \r\n  .container { @include container; } \r\n}\r\n\r\n/* Between the min-width of 30em and the max-width of 60em, \r\n   use a 10-column layout. Provide a fallback class for IE. */\r\n@include at-breakpoint(30em 10 60em ie) { \r\n  .container { @include container; } \r\n}\r\n\r\n/* Create all your container layouts in one go. \r\n   Each argument accepts min/layout/max/ie, same as at-breakpoint. */\r\n.container { @include container(4,8,12); }\r\n```","tagline":"Dynamic grids for designers.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}