// ---------------------------------------------------------------------------
// Container

// Set the outer grid-containing element(s).
@mixin apply-container(){
  @include pie-clearfix;
  margin-left: auto;
  margin-right: auto;
  width: columns-width();
  max-width: 100%;
}

// Set one or more layouts on a grid-containing element at any number of media-query breakpoints.
//
// $media-layout-1        : [default:$total-cols] A list of values including -
//                        : One unitless number (representing columns in a layout)
//                        : Two optional lengths (representing min and max-width media-query breakpoints).
// $media-layout-2 ...-10 : [optional] Same as $media-layout-1
@mixin container(
  $media-layout-1   : $total-cols,
  $media-layout-2   : false,
  $media-layout-3   : false,
  $media-layout-4   : false,
  $media-layout-5   : false,
  $media-layout-6   : false,
  $media-layout-7   : false,
  $media-layout-8   : false,
  $media-layout-9   : false,
  $media-layout-10  : false
){
  $media-layouts    : compact($media-layout-2,$media-layout-3,$media-layout-4,$media-layout-5,$media-layout-6,$media-layout-7,$media-layout-8,$media-layout-9,$media-layout-10);

  @if is-default-layout($media-layout-1) {
    @include apply-container();
  } @else {
    $media-layouts: join($media-layout-1,$media-layouts);
  }

  @each $ml in $media-layouts {
    @if $ml {
      @include at-breakpoint($ml) {
        @include apply-container();
      }
    }
  }
}

// ---------------------------------------------------------------------------
// Column Mixins

// Create a grid element spanning any number of 'columns' in a grid 'context'.
// $columns : The number of columns to span.
// $context : [optional] The context (columns spanned by parent).
//          : Context is required on any nested elements.
//          : Context MUST NOT be declared on a root element.
// $from    : The start direction of your layout (e.g. 'left' for ltr languages)
@mixin columns(
  $columns,
  $context  : false,
  $from     : $from-direction
) {
  $hack     : opposite-position($omega-float);
  $to       : opposite-position($from);
  $sg       : if($context,0,side-gutter());
  $pos      : split-columns-value($columns,position);
  $cols     : split-columns-value($columns,columns);
  
  @if ($pos == 'full') {
    clear: both;
    @if not $context {
      margin: {
        left: side-gutter();
        right: side-gutter();
      }
    }
  } @else {
    width: columns($cols, $context);
 
    @if ($pos == 'alpha') {
      @if not $context {
        margin-#{$from}: side-gutter();
      } @else {
        @warn "The alpha argument is not needed in a nested context";
      }
    }

    @if ($pos == 'omega') {
      float: $omega-float;
      margin-#{$to}: $sg;
      @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
        #margin-#{$hack}: - $gutter-width;
      }
    } @else {  
      float: $from;
      margin-#{$to}: gutter($context);      
    }

    @if $legacy-support-for-ie6 {
      display: inline;
    }
  }
}

// Reset a '+columns' grid element to default block behavior
//
// $from  : The start direction of your layout (e.g. 'left' for ltr languages)
@mixin reset-columns(
  $from : false
) {
  @if $from {
    @warn "The $from argument for 'reset-columns' has been depricated.";
  }
  
  float: none;
  width: auto;
  margin-left: auto;
  margin-right: auto;

  @if $legacy-support-for-ie6 {
    display: block;
  }
}

@mixin reset-column(
  $from : false
) {
  @include reset-columns($from);
  @warn "reset-column in deprecated. please use reset-columns instead.";
}

@mixin un-column(
  $from : false
) {
  @include reset-columns($from);
  @warn "un-column in deprecated. please use reset-columns instead.";
}

// Create a grid element that will span it's entire context.
// There is no need for +columns, +alpha or +omega on a +full element.
//
// $context : The context in columns, when nested.
@mixin full(
  $context: false
) {
  @include columns(full,$context)
}

// @include `reset-full` to reset a full-width element to default block behavior.
//
// $context : The context in columns, when nested.
@mixin reset-full(
  $context: false
) {
  clear: none;
  @if not $context {
    margin: {
      left: auto;
      right: auto;
    }
  };
}

// ---------------------------------------------------------------------------
// Alpha & Omega Mixins
//
// I recommend that you pass the actual nested contexts (when nested)
// rather than a true/false argument (for the sake of consistency).
// The effect is the same, but your code will be much more readable.

// Apply to elements spanning the first column to account for side-gutters.
// - Only needed in the root context, and in conjunction with side-gutters.
//
// $context   : If you need it, you don't need alpha.
// $from      : The start-direction for your document.
@mixin alpha(
  $context  : false,
  $from     : $from-direction
) {
  @if not $context {
    margin-#{$from}: side-gutter();
  } @else {
    @warn "The alpha mixin is not needed in a nested context";
  }
}

// Apply to elements spanning the last column, to account for side-gutters & page edge.
//
// $context : The context in columns, when nested.
// $from    : The start-direction for your document.
@mixin omega(
  $context  : false,
  $from     : $from-direction
) {
  $to     : opposite-position($from);
  $hack   : opposite-position($omega-float);
  $sg     : if($context,0,side-gutter());
  
  float: $omega-float;
  margin-#{$to}: $sg;
  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
    #margin-#{$hack}: - $gutter-width;
  }
  @if $legacy-support-for-ie6 {
    display: inline;
  }
}
