// Grid Syntax
// ===========

// layout math
// - static | fluid
$layout-math          : fluid           !default;

// layout method
// - isolate | float
$layout-method        : float           !default;

// layout direction
// - ltr | rtl
$flow                 : ltr             !default;

// box-sizing
// false | border-box | content-box
$box-sizing           : false           !default;

// container justification
// - left | center | right
$container-position   : center          !default;

// gutter handling
// - before | after | split
$gutter-placement     : after           !default;

// show/hide grids
// show | show-columns | show-baseline | hide
$show-grids           : show-columns    !default;

// Helpers
// -------

// Set a new grid using a shorthand
@mixin set-grid(
  $grid,
  $clean: true
) {
  $grid               : parse-grid($grid);

  // get values
  $new-columns        : get-setting(columns, $grid);
  $new-gutters        : get-setting(gutters, $grid);
  $new-container      : get-setting(container, $grid);
  $new-column-width   : get-setting(column-width, $grid);
  $new-layout-math    : get-setting(layout-math, $grid);
  $new-layout-method  : get-setting(layout-method, $grid);

  $new-flow           : get-setting(flow, $grid);
  $new-gutter-place   : get-setting(gutter-placement, $grid);
  $new-position       : get-setting(container-position, $grid);
  $new-show-grids     : get-setting(show-grids, $grid);
  $new-box            : get-setting(box-sizing, $grid);

  // Set required values
  $columns            : if($new-columns, $new-columns, $columns);
  $gutters            : if($new-gutters, $new-gutters, $gutters);
  $layout-math        : if($new-layout-math, $new-layout-math, $layout-math);
  $layout-method      : if($new-layout-method, $new-layout-method, $layout-method);
  $flow               : if($new-flow, $new-flow, $flow);
  $gutter-placement   : if($new-gutter-place, $new-gutter-place, $gutter-placement);
  $container-position : if($new-position, $new-position, $container-position);
  $show-grids         : if($new-show-grids, $new-show-grids, $show-grids);

  // optionally fill values based on current grid
  @if $clean {
    $container        : $new-container;
    $column-width     : $new-column-width;
    $box-sizing       : $new-box;
  } @else {
    $container        : if($new-container, $new-container, $container);
    $column-width     : if($new-column-width, $new-column-width, $column-width);
    $box-sizing       : if($new-box, $new-box, $box-sizing);
  }
}

// Use an arbitrary grid for a section of code
@mixin use-grid(
  $grid,
  $clean: true
) {
  $old-grid: get-grid();

  @include set-grid($grid, $clean);
  @content;
  @include set-grid($old-grid, $clean);
}

// Grid helpers
// ------------

// Get the current grid settings as a shorthand list
@function get-grid(
) {
  $gutter-setting         : $gutters;
  $show-grids-setting     : false;

  // Use units for column/gutter ratio if available
  @if $column-width {
    $gutter-setting: $column-width $column-width * $gutters;
  }

  // Create keyword for show-grids setting
  @if type-of($show-grids) == bool {
    @if $show-grids {
      $show-grids-setting: show;
    } @else {
      $show-grids-setting: hide;
    }
  } @else {
    $show-grids-setting: $show-grids;
  }

  // Return grid shorthand
  @return compact($container $columns $gutter-setting $layout-math $layout-method $container-position $show-grids-setting $flow $gutter-placement $box-sizing);
}

// Parse a shorthand grid, and return an ordered list of settings
@function parse-grid(
  $grid: get-grid()
) {
  $columns-setting        : false;
  $gutters-setting        : false;
  $container-setting      : false;
  $column-width-setting   : false;
  $layout-math-setting    : false;
  $layout-method-setting  : false;
  $position-setting       : false;
  $flow-setting           : false;
  $gutter-place-setting   : false;
  $show-setting           : false;
  $box-setting            : false;

  $columns-check          : false;

  @each $value in $grid {
    @if type-of($value) == string {
      // layout-math: static | fluid
      @if $value == static {
        $layout-math-setting: static;
      } @else if $value == fluid {
        $layout-math-setting: fluid;
      }

      // layout-method: isolate | fluid
      @if $value == isolate {
        $layout-method-setting: isolate;
      } @else if $value == float {
        $layout-method-setting: float;
      }

      // container-position: left | center | right
      @if $value == left {
        $position-setting: left;
      } @else if $value == right {
        $position-setting: right;
      } @else if $value == center {
        $position-setting: center;
      }

      // flow: ltr | rtl
      @if $value == rtl {
        $flow-setting: rtl;
      } @else if $value == ltr {
        $flow-setting: ltr;
      }

      // show-grid: show | hide
      @if $value == show {
        $show-setting: show;
      } @else if $value == hide {
        $show-setting: hide;
      } @else if $value == show-columns {
        $show-setting: show-columns;
      } @else if $value == show-baseline {
        $show-setting: show-baseline;
      }

      // gutter-placement: before | after | split | no-gutters
      @if $value == before {
        $gutter-place-setting: before;
      } @else if $value == after {
        $gutter-place-setting: after;
      } @else if $value == split {
        $gutter-place-setting: split;
      } @else if $value == inside {
        $gutter-place-setting: inside;
      } @else if $value == no-gutters {
        $gutter-place-setting: no-gutters;
      }

      // box-sizing: border-box | content-box
      @if $value == border-box {
        $box-setting: border-box;
      } @else if $value == content-box {
        $box-setting: content-box;
      }
    }

    // container, columns, or gutters
    @else if type-of($value) == number {
      @if not unitless($value) {
        $container-setting: $value;
      } @else if not $columns-check {
        $columns-setting: $value;
        $columns-check: true;
      } @else {
        $gutters-setting: $value;
      }
    }

    // columns or gutters
    @else if type-of($value) == list {
      @if unitless(nth($value,1)) {
        $columns-setting: $value;
        $columns-check: true;
      } @else {
        $column-width-setting: nth($value,1);
        $gutters-setting: nth($value,2) / nth($value,1);
      }
    }
  }

  @return $columns-setting $gutters-setting $container-setting $column-width-setting $layout-math-setting $layout-method-setting $position-setting $flow-setting $gutter-place-setting $show-setting $box-setting;
}

// Return one setting from a shorhand grid
@function get-setting(
  $setting,
  $grid   : parse-grid(get-grid()),
  $parse  : false
) {
  $options  : columns gutters container column-width layout-math layout-method container-position flow gutter-placement show-grids box-sizing;
  $key      : index($options, $setting);
  $value    : false;

  @if $parse {
    $grid: parse-grid($grid);
  }

  @if $key and not ($key > length($grid)) {
    $value: nth($grid, $key);
  }

  @return $value;
}
