// Span language parsing
// =====================
//
// Mixins:
// - span()

// Set a spanning element using shorthand syntax
@mixin span(
  $input
) {
  $input: parse-span($input);

  $this-span          : nth($input,1);
  $this-location      : nth($input,2);
  $this-columns       : nth($input,3);
  $this-gutters       : nth($input,4);
  $this-column-width  : nth($input,5);
  $this-isolate       : nth($input,6);
  $this-static        : nth($input,7);

  @include float-span($this-span, $this-location, $this-columns, $this-gutters, $this-isolate, $this-column-width, $this-static);
}

// Span Helpers
// ------------

// Parse the span shortcut syntax
@function parse-span(
  $string
) {
  $new-span       : false;
  $new-location   : false;
  $new-context    : false;
  $new-isolate    : false;
  $new-static     : false;

  $new-columns      : false;
  $new-gutters      : false;
  $new-column-width : false;

  $i: 1;

  @while $i <= length($string) {
    $value  : nth($string,$i);
    $at     : false;
    $of     : false;

    // keywords
    @if type-of($value) == string {

      // location keywords: first | last | alpha | omega
      @if $value == first or $value == alpha {
        $new-location: 1;
      } @else if $value == last or $value == omega {
        $new-location: last;
      }

      // isolate
      @else if $value == isolate {
        $new-isolate: isolate;
      }

      // static | fluid
      @else if $value == static {
        $new-static: static;
      } @else if $value == fluid {
        $new-static: fluid;
      }

      // at
      @else if $value == at {
        $at: true;
      }

      // of
      @else if $value == of {
        $of: true;
      }

    // span
    } @else if not $new-span and type-of($value) == number {
      $new-span: $value;
    }

    // location integer
    @if $at {
      $i: $i + 1;
      $new-location: nth($string, $i);
    }

    // context
    @if $of {
      $i: $i + 1;
      $new-context: compact();

      @while $of and $i <= length($string) {
        $this: nth($string,$i);
        @if type-of($this) != string {
          $new-context: append($new-context, $this);
          $i: $i + 1;
        } @else {
          $of: false;
          $i: $i - 1;
        }
      }
    }

    $i: $i + 1;
  }

  // parse the context
  @if $new-context {
    $new-columns: get-setting(columns, $new-context);
    $new-gutters: get-setting(gutters, $new-context);
    $new-column-width: get-setting(column-width, $new-context);
  }

  // use global values for empty grid settings
  @if not $new-columns {
    $new-columns: get-setting(columns);
  }
  @if not $new-gutters {
    $new-gutters: get-setting(gutters);
  }
  @if not $new-column-width {
    $new-column-width: get-setting(column-width);
  }
  @if not $new-static {
    $new-static: get-setting(static);
  }

  @return $new-span $new-location $new-columns $new-gutters $new-column-width $new-isolate $new-static;
}

// Return one particular span setting from a list
@function get-span-setting(
  $setting,
  $span
) {
  $span: parse-span($span);
  $value: false;

  $options  : span location columns gutters column-width isolate static;
  $key      : index($options, $setting);

  @if $key {
    $value: nth($span, $key);
  }

  @return $value;
}
