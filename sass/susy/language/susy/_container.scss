// Container Syntax
// ================


// Container [mixin]
// -----------------
// Set a container element
// - [$layout]  : <settings>
@mixin container(
  $layout: $susy
) {
  $layout: parse-grid($layout);

  $-justify: parse-container-position(susy-get(container-position, $layout));
  $-property: if(susy-get(math, $layout) == static, width, max-width);

  $-output: map-merge((
    clearfix: true,
    box-sizing: susy-get(box-sizing, $layout),
    $-property: container($layout),
  ), $-justify);

  @include susy-render($-output, susy-get(flow, $layout));
  @include show-grid($layout);
}


// Container [function]
// --------------------
// Return container width
// - [$layout]  : <settings>
@function container(
  $layout: $susy
) {
  $layout: parse-grid($layout);
  $-width: susy-get(container, $layout);
  $-column-width: susy-get(column-width, $layout);
  $-math: susy-get(math, $layout);

  @if not $-width or $-width == auto {
    @if valid-column-math($-math, $-column-width) {
      $-columns: susy-get(columns, $layout);
      $-gutters: susy-get(gutters, $layout);
      $-spread: if(is-split($layout), wide, narrow);
      $-width: susy-sum($-columns, $-gutters, $-spread) * $-column-width;
    } @else {
      $-width: 100%;
    }
  }

  @return $-width;
}


// Parse Container Position
// ------------------------
// Parse the $container-position into margin values.
// - [$justify]   : left | center | right | <length> [<length>]
@function parse-container-position(
  $justify: map-get($susy-defaults, container-position)
) {
  $-return: if($justify == left, 0, auto) if($justify == right, 0, auto);

  @if not index(left right center, $justify) {
    $-return: nth($justify, 1);
    $-return: $-return if(length($justify) > 1, nth($justify, 2), $-return);
  }

  $-return: (
    margin-_from_: nth($-return, 1),
    margin-_to_: nth($-return, 2),
  );

  @return $-return;
}
