// Padding Syntax
// ==============


// Prefix
// ------
// Add spanning-padding before an element.
// - $span  : <span>
@mixin prefix(
  $span
) {
  $span: map-merge((spread: wide), parse-span($span));
  $_flow: susy-get(flow, $span);
  $_width: span($span);

  @if is-inside($span) {
    $_gutter: gutter($span);
    $_width: if($_gutter and comparable($_width, $_gutter), $_width + $_gutter, $_width);
  }

  $_output: (
    padding-_from_: $_width,
  );

  @include render($_output, $_flow);
}


// Suffix
// ------
// Add spanning-padding after an element.
// - $span  : <span>
@mixin suffix(
  $span
) {
  $span: map-merge((spread: wide), parse-span($span));
  $_flow: susy-get(flow, $span);
  $_width: span($span);

  @if is-inside($span) {
    $_gutter: gutter($span);
    $_width: if($_gutter and comparable($_width, $_gutter), $_width + $_gutter, $_width);
  }

  $_output: (
    padding-_to_: $_width,
  );

  @include render($_output, $_flow);
}


// Pad
// ---
// Add spanning-padding before and after an element.
// - $pre     : <span>
// - [$post]  : <span>
@mixin pad(
  $pre,
  $post: false
) {
  $pre: map-merge((spread: wide), parse-span($pre));

  @if $post {
    $post: map-merge((spread: wide), parse-span($post));
  } @else {
    $span: susy-get(span, $pre);
    @if length($span) > 1 {
      $pre: map-merge($pre, (span: nth($span, 1)));
      $post: map-merge($pre, (span: nth($span, 2)));
    } @else {
      $post: $pre;
    }
  }

  @include prefix($pre);
  @include suffix($post);
}
