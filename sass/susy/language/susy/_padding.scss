// Padding Syntax
// ==============

// Prefix
// ------
// Add spanning-padding before an element.
// - $span  : <span>
@mixin prefix(
  $span
) {
  $span   : map-merge(parse-span($span), (outer: outer));
  $flow   : span-get(flow, $span);
  $width  : span($span);

  @include padding-output($width, null, $flow);
}

// Suffix
// ------
// Add spanning-padding after an element.
// - $span  : <span>
@mixin suffix(
  $span
) {
  $span   : map-merge(parse-span($span), (outer: outer));
  $flow   : span-get(flow, $span);
  $width  : span($span);

  @include padding-output(null, $width, $flow);
}

// Pad
// ---
// Add spanning-padding before and after an element.
// - $pre     : <span>
// - [$post]  : <span>
@mixin pad(
  $pre,
  $post: $pre
) {
  $pre      : map-merge(parse-span($pre), (outer: outer));
  $post     : map-merge(parse-span($post), (outer: outer));

  $flow     : span-get(flow, $pre) or span-get(flow, $post);
  $before   : null;
  $after    : null;

  $pre-context      : map-merge($pre, (span: null, location: null));
  $post-context     : map-merge($post, (span: null, location: null));
  $default-context  : map-merge(map-merge($susy, $susy-defaults), (span: null, location: null));

  // if the contexts don't line up, and only the post has changed, we use it for both
  @if $pre-context != $post-context and $default-context == $pre-context {
    @include use-grid($post-context) {
      $before: span($pre);
      $after: span($post);
    }
  } @else {
    $before: span($pre);
    $after: span($post);
  }

  @include padding-output($before, $after, $flow);
}
