// Margin Syntax
// =============

// Pre
// ---
// Add spanning-margins before an element.
// - $span  : <span>
@mixin pre(
  $span
) {
  $span: map-merge((spread: wide), parse-span($span));
  $_flow: susy-get(flow, $span);
  $_split: if(susy-get(gutter-position, $span) == split, true, false);
  $_width: if($_split, span($span) + gutter($span), span($span));

  $_output: (
    margin-_from_: $_width,
  );

  @include render($_output, $_flow);
}

// Post
// ----
// Add spanning-margins after an element.
// - $span  : <span>
@mixin post(
  $span
) {
  $span: map-merge((spread: wide), parse-span($span));
  $_flow: susy-get(flow, $span);
  $_split: if(susy-get(gutter-position, $span) == split, true, false);
  $_width: if($_split, span($span) + gutter($span), span($span));

  $_output: (
    margin-_to_: $_width,
  );

  @include render($_output, $_flow);
}

// Push
// ----
// Simple synonymn for pre.
// - $span  : <span>
@mixin push(
  $span
) {
  @include pre($span);
}

// Pull
// ----
// Add negative spanning-margins before an element.
// - $span  : <span>
@mixin pull(
  $span
) {
  $span: map-merge((spread: wide), parse-span($span));
  $_flow: susy-get(flow, $span);
  $_split: if(susy-get(gutter-position, $span) == split, true, false);
  $_width: if($_split, 0 - span($span) + gutter($span), 0 - span($span));

  $_output: (
    margin-_from_: $_width,
  );

  @include render($_output, $_flow);
}

// Squish
// ------
// Add spanning-margins before and after an element.
// - $pre     : <span>
// - [$post]  : <span>
@mixin squish(
  $pre,
  $post: false
) {
  $pre: map-merge((spread: wide), parse-span($pre));

  @if $post {
    $post: map-merge((spread: wide), parse-span($post));
  } @else {
    $span: susy-get(span, $pre);
    @if length($span) > 1 {
      $pre: map-merge($pre, (span: nth($span, 1)));
      $post: map-merge($pre, (span: nth($span, 2)));
    } @else {
      $post: $pre;
    }
  }

  @include pre($pre);
  @include post($post);
}
