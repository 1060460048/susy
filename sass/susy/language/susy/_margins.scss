// Margin Syntax
// =============

// Pre
// ---
// Add spanning-margins before an element.
// - $span  : <span>
@mixin pre(
  $span
) {
  $span   : map-merge(parse-span($span), (outer: outer));
  $flow   : span-get(flow, $span);
  $width  : span($span);

  @include margin-output($width, null, $flow);
}

// Post
// ----
// Add spanning-margins after an element.
// - $span  : <span>
@mixin post(
  $span
) {
  $span   : map-merge(parse-span($span), (outer: outer));
  $flow   : span-get(flow, $span);
  $width  : span($span);

  @include margin-output(null, $width, $flow);
}

// Push
// ----
// Simple synonymn for pre.
// - $span  : <span>
@mixin push(
  $span
) {
  @include pre($span);
}

// Pull
// ----
// Add negative spanning-margins before an element.
// - $span  : <span>
@mixin pull(
  $span
) {
  $span   : map-merge(parse-span($span), (outer: outer));
  $flow   : span-get(flow, $span);
  $width  : 0 - span($span);

  @include margin-output($width, null, $flow);
}

// Squish
// ------
// Add spanning-margins before and after an element.
// - $pre     : <span>
// - [$post]  : <span>
@mixin squish(
  $pre,
  $post: $pre
) {
  $pre      : map-merge(parse-span($pre), (outer: outer));
  $post     : map-merge(parse-span($post), (outer: outer));

  $flow     : span-get(flow, $pre) or span-get(flow, $post);
  $before   : null;
  $after    : null;

  $pre-context      : map-merge($pre, (span: null, location: null));
  $post-context     : map-merge($post, (span: null, location: null));
  $default-context  : map-merge(map-merge($susy, $susy-defaults), (span: null, location: null));

  // if the contexts don't line up, and only the post has changed, we use it for both
  @if $pre-context != $post-context and $default-context == $pre-context {
    @include use-grid($post-context) {
      $before: span($pre);
      $after: span($post);
    }
  } @else {
    $before: span($pre);
    $after: span($post);
  }

  @include margin-output($before, $after, $flow);
}

// Bleed
// -----
// Add negative margins, and equal positive padding to create bleed.
// - $span  : <span>
@mixin bleed(
  $bleed: 0 gutter()
) {
  $bleed    : parse-bleed($bleed);
  $context  : get-span-context($bleed);
  $trbl     : span-get(span, $bleed);
  $spans    : (top: 0, right: 0, bottom: 0, left: 0);

  $i: 1;
  @each $span in $trbl {
    $span: span(map-merge($bleed, (span: $span)));
    @if $i == 1 {
      $spans: map-merge($spans, (top: $span, right: $span, bottom: $span, left: $span));
    } @else if $i == 2 {
      $spans: map-merge($spans, (right: $span, left: $span));
    } @else if $i == 3 {
      $spans: map-merge($spans, (bottom: $span));
    } @else if $i == 4 {
      $spans: map-merge($spans, (left: $span));
    }
    $i: $i + 1;
  }

  @if $box-sizing == border-box {
    @include susy-box-sizing(content-box);
  }

  @each $side, $span in $spans {
    $padding: $span;
    @if is-inside($bleed) and ($side == right or $side == left) {
      $gutter: gutter($context);
      $padding: if(comparable($padding, $gutter), $padding + $gutter, $padding);
    }
    margin-#{$side}: if($span != 0, 0 - $span, null);
    padding-#{$side}: if($padding != 0, $padding, null);
  }
}

@mixin bleed-x(
  $bleed: gutter()
) {
  $bleed  : parse-bleed($bleed);
  $trbl   : span-get(span, $bleed);

  @if length($trbl) == 1 {
    $bleed: map-merge($bleed, (span: 0 $trbl));
  } @else if length($trbl) == 2 {
    $bleed: map-merge($bleed, (span: 0 nth($trbl, 1) 0 nth($trbl, 2)));
  } @else {
    @warn 'bleed-x only takes 2 lengths, but #{length($trbl)} were passed.';
  }

  @include bleed($bleed);
}

@mixin bleed-y(
  $bleed: if(function-exists(rhythm), rhythm(1), 1em)
) {
  $bleed  : parse-bleed($bleed);
  $trbl   : span-get(span, $bleed);

  @if length($trbl) == 1 {
    $bleed: map-merge($bleed, (span: $trbl 0));
  } @else if length($trbl) == 2 {
    $bleed: map-merge($bleed, (span: nth($trbl, 1) 0 nth($trbl, 2) 0));
  } @else {
    @warn 'bleed-y only takes 2 lengths, but #{length($trbl)} were passed.';
  }

  @include bleed($bleed);
}

// Parse Bleed
// -----------
// Parse the bleed syntax, returning a TRBL list of spans
// - $bleed: <bleed>
@function parse-bleed(
  $bleed
) {
  $return: $bleed;

  @if type-of($bleed) != map {
    $return: parse-span($bleed);
    $span-list: ();
    $keywords: false;
    $i: 1;

    @while not $keywords and $i <= length($bleed) {
      $item: nth($bleed, $i);

      @if type-of($item) == number {
        $span-list: append($span-list, $item);
      } @else {
        $keywords: true;
      }

      $i: $i + 1;
    }

    $return: map-merge($return, (span: $span-list));
  }

  @return map-merge($return, (outer: outer));
}

