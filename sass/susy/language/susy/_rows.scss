// Row Start & End
// ===============

// Row
// ---
// Apply to any layout element that should force a new layout row.
// - [$flow]  : ltr | rtl
@mixin row(
  $flow: susy-get(flow)
) {
  @include susy-clearfix;
  clear: both;
}

// Unrow
// -----
// Cancel the row() effect, e.g. when using media queries.
// - [$flow]: ltr | rtl
@mixin unrow {
  clear: none;
  &:after {
    content: none;
    display: inline;
    clear: none;
  }
}

// First
// -----
// - [$grid]: <settings>
@mixin first(
  $grid: $susy
) {
  $grid: parse-grid($grid);
  $flow: susy-get(flow, $grid);
  $split: if(susy-get(gutter-position, $grid) == split, true, false);

  @if not $split {
    @include float-first($flow);
  }
}

@mixin alpha(
  $grid: $susy
) {
  @include first($grid);
}

// Nth-First
// ---------
// - [$value]   : first | last | only | <math>
// - [$type]    : child | last-child | of-type | last-of-type
@mixin nth-first(
  $value: first,
  $type: child,
  $grid: $susy
) {
  &:#{format-nth($value,$type)} { @include first($grid); }
}

// Nth-Alpha
// ---------
// - [$value]   : first | last | only | <math>
// - [$type]    : child | last-child | of-type | last-of-type
@mixin nth-alpha(
  $value: first,
  $type: child,
  $grid: $susy
) {
  @include nth-first($value, $type, $grid);
}

// Last
// -----
// - [$grid]: <settings>
@mixin last(
  $grid: $susy
) {
  $grid: parse-grid($grid);
  $output: (
    flow: susy-get(flow, $grid),
    margin: if(susy-get(gutter-position, $grid) == split, gutters($grid), 0),
  );

  @include float-last($output...);
}

@mixin omega(
  $grid: $susy
) {
  @include last($grid);
}

// Nth-Last
// --------
// - [$value] : first | last | only | <math>
// - [$type]  : child | last-child | of-type | last-of-type
// - [$grid]  : <settings>
@mixin nth-last(
  $value: last,
  $type: child,
  $grid: $susy
) {
  &:#{format-nth($value,$type)} { @include last($grid); }
}

// Nth-Omega
// ---------
// - [$value] : first | last | only | <math>
// - [$type]  : child | last-child | of-type | last-of-type
// - [$grid]  : <settings>
@mixin nth-omega(
  $value: last,
  $type: child,
  $grid: $susy
) {
  @include nth-last($value, $type, $grid);
}
