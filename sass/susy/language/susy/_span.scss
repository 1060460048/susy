// Span Syntax
// ===========

// Span [mixin]
// ------------
// Set a spanning element using shorthand syntax.
// - $span  : <span>
@mixin span(
  $span
) {
  $span     : parse-span($span);
  $output   : span-math($span);
  $box      : susy-get(box-sizing, $span) or if(is-inside($span), border-box, null);

  @include susy-box-sizing($box);
  @include float-span-output($output...);
  @include nested($span) { @content; }
}

// Span [function]
// ---------------
// Return the width of a span.
// - $span  : <span>
@function span(
  $span
) {
  @return get-span-width(parse-span($span));
}

// Span Math
// ---------
// Get all the span results.
// - $span: <map>
@function span-math(
  $span
) {
  $split-container  : if(is-split($span) and susy-get(is-container, $span), true, false);

  $float            : from;
  $padding-before   : null;
  $padding-after    : null;
  $margin-before    : null;
  $margin-after     : null;

  // calculate widths
  $spread: index(map-values($span), spread);
  $span: if($split-container and not $spread, map-merge($span, (spread: wide)), $span);
  $width: get-span-width($span);
  $gutters: get-gutters($span);

  // apply gutters
  @if is-inside($span) {
    @if not susy-get(is-container, $span) {
      $padding-before: map-get($gutters, before);
      $padding-after: map-get($gutters, after);
    }
  } @else {
    @if not ($split-container) {
      $margin-before: map-get($gutters, before);
      $margin-after: map-get($gutters, after);
    }
  }

  // special margin handling
  @if susy-get(layout-method, $span) == isolate {
    $margin-before: get-isolation($span);
    $margin-after: -100%;
  } @else {
    $location: susy-get(location, $span);
    @if $location {
      $last: is-last(susy-get(span, $span), $location, susy-get(columns, $span));
      $is-split: is-split($span);
      @if $last {
        $float: susy-get(last-flow, $span);
        $margin-after: if($is-split, $margin-after, null);
      } @else if is-first($location) {
        $margin-before: if($is-split, $margin-before, null);
      }
    }
  }

  @return (
    width           : $width,
    float           : $float,
    margin_before   : $margin-before,
    margin_after    : $margin-after,
    padding_before  : $padding-before,
    padding_after   : $padding-after,
    flow            : susy-get(flow, $span),
  );
}

// Get Span Width
// --------------
// Return span width.
// - $span: <map>
@function get-span-width(
  $span
) {
  $span     : parse-span($span);

  $n        : susy-get(span, $span);
  $location : susy-get(location, $span);
  $columns  : susy-get(columns, $span);
  $gutters  : susy-get(gutters, $span);
  $spread   : susy-get(spread, $span);

  $context  : null;
  $span-sum : null;
  $width    : null;

  @if unitless($n) {
    $context: column-sum($columns, $gutters, if(is-split($span), wide, narrow));
    $span-sum: get-column-span-sum($n, $location, $columns, $gutters, if(is-inside($span), wide, $spread));

    @if susy-get(layout-math, $span) == static {
      $width: $span-sum * susy-get(column-width, $span);
    } @else {
      $width: percentage($span-sum / $context);
    }
  } @else {
    $width: $n;
  }

  @return $width;
}
