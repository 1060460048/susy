// -----------------------------------------------
// Grid Overlay & Background
//
// Uses all your settings to create a grid background for a container element.
// There are three ways you can display a grid:
//
// 1. Manually apply the background to the element -
//
//        .container {
//          @include background-grid;
//        }
//
// 2. Add a switch to toggle an overlay -
//
//        @include grid-overlay('.container');
//
// 3. Toggle grid with JavaScript
//
//        @include grid-toggle;
//        Add [data-development-grid="show"] to item you want grid applied to
//        Add "grid.min.js" to your HTML
//
// The first will apply a grid background to your container calculated using your
// grid settings, media breakpoints etc.
//
// The second will add a switch to your page which allows you to view a grid
// overlay over your container (or <body> if none is provided) by hovering over
// the switch. if you need your mouse for other things you can toggle the overlay
// on permanently by inspecting <head> and checking :hover in your styles panel.
//
// The thid will allow you to toggle your background grid on and off by pressing the 'g' on your keyboard.
//
// Note: Sub-pixel rounding can lead to several pixels of variation between browsers.


// -----------------------------------------------
// Imports
@import "compass/css3";

// -----------------------------------------------
// Grid Overlay

// The overlay is painted over your container's ::after pseudo-element, so we must
// give position to the container itself, if relative doesn't suit your layout
// it can be replaced by absolute/fixed.
$overlay-position: relative !default;

// Set the position of the switch.
$overlay-switch-position: left bottom !default;

%grid-overlay-container {
  position: unquote($overlay-position);
}

%grid-overlay {
  content: " ";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  height: 100%;
  width: 100%;
  z-index: 999;
}

// A $grid includes 3 parts:
// - container selector
// - columns
// - gutters
@mixin grid-overlay (
  $color, $grids...
) {

  $vert: nth($overlay-switch-position, 1);
  $horz: nth($overlay-switch-position, 2);

  head {
    display: block;
    position: fixed;
    #{$horz}: 10px;
    #{$vert}: 10px;
    z-index: 99;
    color: #333;
    text-shadow: 0 0 3px #fff;
    @include transition(all .4s);
    &::before {
      content: "||||";
      display: block;
      padding: 10px 14px;
      letter-spacing: -1;
      font: {
        family: sans-serif;
        size: 26px;
        weight: bold;
      }
    }
    &:hover {
      color: #333;
      text-shadow: 1px 1px #fff;
      @each $grid in $grids {
        $selector: '.#{nth($grid, 1)}';
        $this-columns: nth($grid, 2);
        $this-gutters: nth($grid, 3);

        ~ body #{$selector} {
          @extend %grid-overlay-container;
        }
        ~ #{$selector}::after,
        ~ body #{$selector}::after {
          @extend %grid-overlay;
          @include background-grid($this-columns, $this-gutters, $color);
        }
      }
    }
  }
}

// -----------------------------------------------
// Grid Toggle

@mixin grid-toggle (
  $columns: $columns,
  $gutters: $gutters,
  $color: rgba(lightblue, .25)
  ) {

  [data-development-grid="show"] {
    @include background-grid;
  }
}

// -----------------------------------------------
// Grid Background

@mixin background-grid (
  $columns: $columns,
  $gutters: $gutters,
  $color: rgba(lightblue, .25)
) {
  $stops: background-gradient-stops($columns, $gutters, $color);

  @include background(
    linear-gradient(left, $stops...)
  );
}

// -----------------------------
// Get the stops of the gradient
@function background-gradient-stops (
  $columns: $columns,
  $gutters: $gutters,
  $color: rgba(lightblue, .25)
) {
  $stops: compact();

  @for $i from 1 through column-count($columns) {
    $stops: join($stops, background-column-gradient($i, $columns, $gutters, $color), comma);
  }

  @return $stops;
}

// ---------------
// Get the columns
@function background-column-gradient (
  $location,
  $columns: $columns,
  $gutters: $gutters,
  $color: rgba(lightblue, .25)
) {
  $stops  : compact();

  $trans  : transparent;
  $light  : lighten($color, 5%);

  $gutter : relative-gutter-span($columns, $gutters);

  @if $location > 1 {
    $start: relative-column-span($location - 1, 1, $columns, $gutters) + $gutter;
    $stops: append($stops, $color $start, comma);
  }

  @if $location < column-count($columns) {
    $end: relative-column-span($location, 1, $columns, $gutters);
    $stops: append($stops, $light $end, comma);
    $stops: append($stops, $trans $end, comma);
    $stops: append($stops, $trans $end + $gutter, comma);
  } @else {
    $stops: append($stops, $light 100%, comma);
  }

  @return $stops;
}
