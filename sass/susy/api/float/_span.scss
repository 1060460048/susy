// Float span
// ==========

// Output span
@mixin float-span-output(
  $width,
  $float            : from($flow),
  $margin-before    : null,
  $margin-after     : null,
  $padding-before   : null,
  $padding-after    : null,
  $flow             : $flow
) {
  $to     : to($flow);
  $from   : from($flow);

  width: $width;
  float: $float;
  margin-#{$from}: $margin-before;
  margin-#{$to}: $margin-after;
  padding-#{$from}: $padding-before;
  padding-#{$to}: $padding-after;
}

// Calculate the properties for a floated span
@mixin float-span(
  $span,
  $location       : false,
  $columns        : $columns,
  $gutters        : $gutters,
  $column-width   : $column-width,
  $isolate        : $isolate,
  $static         : $static,
  $flow           : $flow,
  $gutter-place   : $gutter-placement
) {
  $width            : null;

  $float            : from($flow);
  $gutter           : get-gutter-width($columns, $gutters, $column-width, $static);

  $margin-before    : null;
  $margin-after     : null;
  $padding-before   : null;
  $padding-after    : null;

  @if index($gutter-place, before) {
    $margin-before: $gutter;
  } @else if index($gutter-place, after) {
    $margin-after: $gutter;
  }

  @if unitless($span) {
    $width: get-span-width($span, $location, $columns, $gutters, $column-width, $static);
  } @else {
    $width: $span;
  }

  @if $isolate and $isolate != float {
    @if type-of($location) == number and not unitless($location) {
      $margin-before: $location;
    } @else {
      $margin-before: get-isolation-position($span, $location, $columns, $gutters);
    }
    $margin-after: -100%;
  } @else {
    @if is-last($span, $location, $columns) {
      $float: to($flow);
      $margin-after: null;
    } @else if is-first($location) {
      $margin-before: null;
    }
  }

  @include float-span-output($width, $float, $margin-before, $margin-after, $padding-before, $padding-after, $flow);
}
