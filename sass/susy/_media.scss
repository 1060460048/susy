// ---------------------------------------------------------------------------
// Responsive Layout Settings

// create any variables you want to reflect different min-width, max-width, and layout settings.
// Or create breakpoint/layout combos (e.g. `30em 8 60em` for min 30em, max 60em, 8 columns).
// Order doesn't matter. Any unitless number will be used to set layout columns.
// Any lengths will be compared (if possible) to determine min and max.
// If there is only one length, it will be used as a min-width.
// $small-min         : 30em;
// $small-layout      : 8;
// $small             : small-breakpoint $small-layout;
// $small-only        : small-breakpoint $small-layout 60em;

// ---------------------------------------------------------------------------
// Internal Layout Functions

@function medialayout(
  $media-layout,
  $split  : false
) {
  $media  : compact();
  $min    : false;
  $max    : false;
  $layout : false;
  $return : false;

  @each $val in $media-layout {
    @if unitless($val) {
      $layout: $val;
    } @else {
      $media: join($media,$val);
    }
  }

  @if $media {
    @if (length($media) == 1) {
      $min: $media;
    } @else {
      $min: nth($media,1);
      $max: nth($media,2);
      @if unit($min) == unit($max) {
        @if ($min > $max) {
          $max: nth($media,1);
          $min: nth($media,2);
        }
      } @else {
        @warn "can't compare incompatible units.
         Using #{$min} for min-width, and #{$max} for max-width";
      }
      @if (length($media) > 2) {
        @warn "you can only send two lengths: a min-width and an (optional) max-width.
         You sent #{length($media)}: #{$media}";
      }
    }
  }

  $return : $min $layout $max;

  @if ($split == 'min') {
    $return: $min;
  } @else {
    @if ($split == 'max') {
      $return: $max;
    } @else {
      @if ($split == 'layout') {
        $return: $layout;
      }
    }
  }

  @return $return;
}

// ---------------------------------------------------------------------------
// Layout Mixins


// Layout
// $layout-cols : set the (unitless) number of columns to use for this layout.
@mixin layout(
  $layout-cols
) {
  // store default $total-cols setting for later, then change it.
  $default-layout : $total-cols;
  $total-cols     : $layout-cols;

  // apply children in this new layout context.
  @content;

  // return to default $total-cols setting.
  $total-cols     : $default-layout;
}

// At-Breakpoint
// $media-layout : a pair of values
// - one is a length (em, px, etc) representing the @media breakpoint to apply.
// - one is a unitless number representing the number of columns to use in this new layout context.
@mixin at-breakpoint(
  $media-layout
) {
  $media-layout : medialayout($media-layout);
  $min          : nth($media-layout,1);
  $layout       : nth($media-layout,2);
  $max          : nth($media-layout,3);

  @if $layout {
    @if $min and $max {
      @media (min-width: $min) and (max-width: $max) {
        @include layout($layout) {
          @content;
        }
      }
    } @else {
      @if $min {
        @media (min-width: $min) {
          @include layout($layout) {
            @content;
          }
        }
      }
    }
  } @else {
    @warn "please supply a unitless number of columns to use for this new layout context.";
  }
}
