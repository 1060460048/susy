// ---------------------------------------------------------------------------
// Responsive Grid Settings (optional)

// Optionally create any variables you want to reflect different min-width, max-width, and layout settings.
//
// $small-breakpoint  : 30em;
// $small-layout      : 8;
// $small             : $small-breakpoint $small-layout;
//
// $medium-breakpoint : 60em
// $medium-layout     : 12
// $medium            : $medium-breakpoint $medium-layout;
//
// $small-only        : join($small,$medium-breakpoint);

// ---------------------------------------------------------------------------
// Private Functions

// Sort a list of arguments into "$min $layout $max" order, and return the list.
//
// $media-layout  : a list of values including -
//                : One unitless number (representing columns in a layout)
//                : Two optional lengths (representing min and max-width media-query breakpoints).
//
// Order is irrelevant in most cases:
// - any unitless number will be used as the total column-count ($total-cols) for this layout.
// - if no length is provided, a min-width will be created based on the number of columns present.
// - if one length is provided, it will be used as a min-width.
// - if two lengths are provided, they will be used for min and max based on a comparison of values.
// - if the values cannot be compared, then we use the first for min and the second for max.

@function medialayout(
  $media-layout
) {
  $media  : compact();
  $min    : false;
  $max    : false;
  $layout : false;

  @each $val in $media-layout {
    @if unitless($val) {
      $layout: $val;
    } @else {
      $media: join($media,$val);
    }
  }

  @if (length($media) > 0) {
    @if (length($media) == 1) {
      $min: $media;
    } @else {
      $min: nth($media,1);
      $max: nth($media,2);
      @if unit($min) == unit($max) {
        @if ($min > $max) {
          $max: nth($media,1);
          $min: nth($media,2);
        }
      } @else {
        @warn "Can't compare incompatible units.
         Using #{$min} for min-width, and #{$max} for max-width";
      }
      @if (length($media) > 2) {
        @warn "You can only send two lengths: a min-width and an (optional) max-width.
         You sent #{length($media)}: #{$media}";
      }
    }
  }

  @return $min $layout $max;
}

// ---------------------------------------------------------------------------
// Public API Mixins

// Create a new layout context for (@content) descendants.
//
// $layout-cols : a (unitless) number of columns to use for this layout.
@mixin layout(
  $layout-cols
) {
  // store default $total-cols setting for later, then change it.
  $default-layout : $total-cols;
  $total-cols     : $layout-cols;

  // apply children in this new layout context.
  @content;

  // return to default $total-cols setting.
  $total-cols     : $default-layout;
}

// Nest a block of code inside a new media-query and layout context.
//
// $media-layout  : a list of values including -
//                : One unitless number (representing columns in a layout)
//                : Two optional lengths (representing min and max-width media-query breakpoints).
//
// Order is irrelevant in most cases:
// - any unitless number will be used as the total column-count ($total-cols) for this layout.
// - if no length is provided, a min-width will be created based on the number of columns present.
// - if one length is provided, it will be used as a min-width.
// - if two lengths are provided, they will be used for min and max based on a comparison of values.
// - if the values cannot be compared, then we use the first for min and the second for max.
@mixin at-breakpoint(
  $media-layout
) {
  $media-layout : medialayout($media-layout);
  $min          : nth($media-layout,1);
  $layout       : nth($media-layout,2);
  $max          : nth($media-layout,3);

  @if $layout {
    @include layout($layout) {
      @if $min and $max {
        // Both $min and $max.
        @media (min-width: $min) and (max-width: $max) {
          @content;
        }
      } @else {
        @if not $min {
          // Neither $min nor $max (it's impossible to have $max without $min).
          // We can create a breakpoint based on the number of columns in the layout.
          $min: columns-width();
        }
        // Min only. At this point, we always have $min without $max.
        // No need to test for it.
        @media (min-width: $min) {
          @content;
        }
      }
    }
  } @else {
    // If you don't provide a layout, there's not much we can do.
    // Unless we create the next closest layout... hmmm...
    @warn "Please supply a unitless number of columns to use for this new layout context.";
  }
}
