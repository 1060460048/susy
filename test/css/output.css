html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font: inherit;
  font-size: 100%;
  vertical-align: baseline;
}

html {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

caption, th, td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}

q, blockquote {
  quotes: none;
}
q:before, q:after, blockquote:before, blockquote:after {
  content: "";
  content: none;
}

a img {
  border: none;
}

article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block;
}

html {
  font-size: 100%;
  line-height: 1.5em;
}

html {
  font-family: sans-serif;
}

body {
  padding: 1.5rem;
}

h1 {
  font-weight: bold;
}

[role="banner"] {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 48px;
  line-height: 3rem;
}

.results {
  margin-top: 24px;
  margin-top: 1.5rem;
  margin-bottom: 24px;
  margin-bottom: 1.5rem;
  border-width: 1px;
  border-width: 0.0625rem;
  border-style: solid;
  padding: 23px;
  padding: 1.4375rem;
  background-color: rgba(255, 0, 0, 0.25);
  border-color: red;
}
.results::before {
  content: 'Unit Tests: ';
  font-weight: bold;
}
.results::before, .results::after {
  display: inline;
}

.test-module {
  border-bottom-width: 6px;
  border-bottom-width: 0.375rem;
  border-bottom-style: solid;
  padding-bottom: 18px;
  padding-bottom: 1.125rem;
  margin-bottom: 12px;
  margin-bottom: 0.75rem;
  border-style: dotted;
}
.test-module:last-of-type {
  padding-bottom: 0;
  border: 0;
}
.test-module > h1 {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 48px;
  line-height: 3rem;
  margin-bottom: 12px;
  margin-bottom: 0.75rem;
}

[class^="test__"] {
  margin-bottom: 12px;
  margin-bottom: 0.75rem;
}
[class^="test__"] h1 {
  padding: 0.375rem 0.75rem;
  background: #666;
  color: #eee;
  font-weight: normal;
  font-family: monospace, sans-serif;
}

[class^="assert__"] {
  margin-bottom: 12px;
  margin-bottom: 0.75rem;
  text-align: center;
}
[class^="assert__"] div {
  background: rgba(255, 255, 255, 0.25);
  outline: 1px solid rgba(255, 0, 0, 0.25);
  outline-offset: -1px;
}
[class^="assert__"] .test, [class^="assert__"] .expect {
  margin-bottom: 12px;
  margin-bottom: 0.75rem;
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 24px;
  line-height: 1.5rem;
  background: -moz-linear-gradient(right, rgba(255, 255, 255, 0.75), rgba(255, 255, 255, 0.75)), rgba(255, 204, 204, 0.5);
  background: -webkit-linear-gradient(right, rgba(255, 255, 255, 0.75), rgba(255, 255, 255, 0.75)), rgba(255, 204, 204, 0.5);
  background: linear-gradient(to left, rgba(255, 255, 255, 0.75), rgba(255, 255, 255, 0.75)), rgba(255, 204, 204, 0.5);
  -moz-background-clip: content, border;
  -webkit-background-clip: content, border;
  background-clip: content-box, border-box;
}
[class^="assert__"] .test {
  outline-color: red;
}
[class^="assert__"] .expect {
  outline-color: green;
}
[class^="assert__"] .spacer {
  height: 3.75rem;
  outline: 1px solid rgba(68, 68, 68, 0.25);
  background: rgba(68, 68, 68, 0.125);
}

/*

### Shared Output ------ */
/* - [mixin] output */
.test__output .assert__output {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__output .assert__output::before {
  content: "Property value pairs are passed in as maps and output as CSS.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/*  

### Direction Helpers ------ */
/*  - [function] get-direction (2 Assertions, 2 Passed, 0 Failed) */
/*  - [function] to (2 Assertions, 2 Passed, 0 Failed) */
/*  - [function] from (2 Assertions, 2 Passed, 0 Failed) */
/*  
    3 Tests:
    - 3 Passed
    - 0 Failed */
/*

### Grid Background API ------ */
/* - [mixin] background-grid-output */
.test__background-grid-output .assert__show {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__background-grid-output .assert__show .test, .test__background-grid-output .assert__show .expect {
  padding-top: 48px;
  padding-top: 3rem;
  padding-bottom: 48px;
  padding-bottom: 3rem;
  background: none;
}

.test__background-grid-output .assert__show::before {
  content: "Elements should show a horizontal clipped red-green-blue gradient, and a vertical baseline";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/*

### Shared Container API ------ */
/* - [mixin] container-output */
.test__container-output .assert__fluid {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__container-output .assert__fluid::before {
  content: "Containers should have 60em max-width, centered.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

.test__container-output .assert__static {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__container-output .assert__static::before {
  content: "Containers should have 30em width, flush right.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

.test__container-output .assert__auto {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__container-output .assert__auto::before {
  content: "Containers should have 100% width.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/*

### Shared Margin API ------ */
/* - [mixin] margin-output */
.test__margin-output .assert__margin-output {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__margin-output .assert__margin-output::before {
  content: "Elements should have 25% right margin, 8em left.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/*

### Shared Padding API ------ */
/* - [mixin] padding-output */
.test__padding-output .assert__padding-output {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__padding-output .assert__padding-output::before {
  content: "Elements should have 25% right padding, 8em left.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/*

### Prefix Support ------ */
/* - [mixin] susy-prefix */
.test__susy-prefix .assert__susy-prefix {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__susy-prefix .assert__susy-prefix::before {
  content: "Requested prefixes are added to output.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/*

### Background Support ------ */
/* - [mixin] susy-background-image */
.test__susy-background-image .assert__susy-background-image {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__susy-background-image .assert__susy-background-image::before {
  content: "Without Compass, background-image is output directly.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/* - [mixin] susy-background-size */
.test__susy-background-size .assert__susy-background-size {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__susy-background-size .assert__susy-background-size::before {
  content: "Without Compass, background-size is output with prefixes.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/* - [mixin] susy-background-origin */
.test__susy-background-origin .assert__susy-background-origin {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__susy-background-origin .assert__susy-background-origin::before {
  content: "Without Compass, background-origin is output with prefixes.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/* - [mixin] susy-background-clip */
.test__susy-background-clip .assert__susy-background-clip {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__susy-background-clip .assert__susy-background-clip::before {
  content: "Without Compass, background-clip is output with prefixes.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/*  

### Box Sizing Support ------ */
/* - [mixin] susy-box-sizing */
.test__susy-box-sizing .assert__border-box {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__susy-box-sizing .assert__border-box .test, .test__susy-box-sizing .assert__border-box .expect {
  width: 50%;
  padding: 0 2em;
}

.test__susy-box-sizing .assert__border-box::before {
  content: "Box-models are correctly output and prefixed.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/*  
    0 Tests:
    - 0 Passed
    - 0 Failed */
/*

### rem Support ------ */
.test__ .assert__ {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__ .assert__::before {
  content: "Without compass, rem units are output unchanged.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/*

### Clearfix Support ------ */
/* - [mixin] susy-clearfix */
.test__susy-clearfix .assert__clearfix {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__susy-clearfix .assert__clearfix .spacer {
  float: left;
  width: 25%;
}

.test__susy-clearfix .assert__clearfix::before {
  content: "Elements should clear floated children.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/*

### Susy Support ------ */
/* - [mixin] susy-support */
.test__susy-support .assert__susy-support {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__susy-support .assert__susy-support::before {
  content: "Recogizes properties that need special support,
      and passes others through directly.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/*

### Float Container API ------ */
/* - [mixin] float-container */
.test__float-container .assert__float-container {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__float-container .assert__float-container::before {
  content: "Containers should be 30em wide, flush left.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/*

### Float Span API ------ */
/* - [mixin] float-span-output */
.test__float-span-output .assert__full {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__float-span-output .assert__full .expect {
  clear: both;
}

.test__float-span-output .assert__full::before {
  content: "Output should be 25%, floated left, with matching margins/padding";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

.test__float-span-output .assert__float-to {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__float-span-output .assert__float-to .expect {
  clear: both;
}

.test__float-span-output .assert__float-to::before {
  content: "Output should be 25%, floated right";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

.test__float-span-output .assert__float-null {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__float-span-output .assert__float-null::before {
  content: "Output should be 25%, not floated";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/*

### Float End API ------ */
/* - [mixin] float-last */
.test__float-last .assert__default {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__float-last .assert__default .test, .test__float-last .assert__default .expect {
  float: left;
  width: 75%;
  margin-right: 5%;
}

.test__float-last .assert__default::before {
  content: "Items should float flush right.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

.test__float-last .assert__last-flow-from {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__float-last .assert__last-flow-from .test, .test__float-last .assert__last-flow-from .expect {
  float: left;
  width: 75%;
  margin-right: 5%;
}
.test__float-last .assert__last-flow-from .expect {
  clear: both;
}
.test__float-last .assert__last-flow-from .spacer {
  overflow: hidden;
}

.test__float-last .assert__last-flow-from::before {
  content: "Items should not have any right margin.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/* - [mixin] float-first */
.test__float-first .assert__float-first {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__float-first .assert__float-first .test, .test__float-first .assert__float-first .expect {
  float: left;
  width: 75%;
  margin-left: 5%;
}

.test__float-first .assert__float-first::before {
  content: "Items should float flush left.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

/*

### Isolation API ------ */
/* - [mixin] isolate-output */
.test__isolate-output .assert__isolate-output {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5);
}

.test__isolate-output .assert__isolate-output .test, .test__isolate-output .assert__isolate-output .expect {
  width: 40%;
  float: left;
  margin-right: 5.26316%;
}
.test__isolate-output .assert__isolate-output .expect {
  clear: both;
}

.test__isolate-output .assert__isolate-output::before {
  content: "Isolation at 30%, has 30% left margin and -100% right margin.";
  display: block;
  padding: 0.375rem 0.75rem;
  text-align: left;
  font-style: italic;
}

.results {
  background: rgba(0, 128, 0, 0.25);
  border-color: green;
}
.results::after {
  content: "3 Tests, 3 Passed, 0 Failed";
}
