@charset "UTF-8";
/* Susy Tests */
/* ========== */
.test__overlay-grid .assert__overlay-grid .test head:hover ~ .sym::before,
.test__overlay-grid .assert__overlay-grid .test head:hover ~ body .sym::before, .test__overlay-grid .assert__overlay-grid .test head:hover ~ .asym::before,
.test__overlay-grid .assert__overlay-grid .test head:hover ~ body .asym::before, .test__overlay-grid .assert__overlay-grid .expect head:hover ~ .sym::before,
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ body .sym::before, .test__overlay-grid .assert__overlay-grid .expect head:hover ~ .asym::before,
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ body .asym::before {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  content: " ";
  z-index: 998;
}

/*  

### Column Math ------ */
/*  - [function] is-symmetrical() (3 Assertions, 3 Passed, 0 Failed) */
/*  - [function] column-count() (2 Assertions, 2 Passed, 0 Failed) */
/*  - [function] column-sum() — symmetrical (3 Assertions, 3 Passed, 0 Failed) */
/*  - [function] column-sum() — asymmetrical (3 Assertions, 3 Passed, 0 Failed) */
/*  - [function] get-columns() (3 Assertions, 3 Passed, 0 Failed) */
/*  - [function] get-column-span-sum() (2 Assertions, 2 Passed, 0 Failed) */
/*  
    6 Tests:
    - 6 Passed
    - 0 Failed */
/*  

### Container Math ------ */
/*  - [function] parse-container-position() (6 Assertions, 6 Passed, 0 Failed) */
/*  - [function] calculate-container-width() (1 Assertions, 1 Passed, 0 Failed) */
/*  
    2 Tests:
    - 2 Passed
    - 0 Failed */
/*  

### Location Math ------ */
/*  - [function] is-last (5 Assertions, 5 Passed, 0 Failed) */
/*  - [function] is-first (4 Assertions, 4 Passed, 0 Failed) */
/*  - [function] get-location-position (3 Assertions, 3 Passed, 0 Failed) */
/*  
    3 Tests:
    - 3 Passed
    - 0 Failed */
/*  

### Box Sizing Helper ------ */
/* - [mixin] susy-box-sizing */
/* "Box-models are correctly output and prefixed." */
.test__susy-box-sizing .assert__border-box .test {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}
.test__susy-box-sizing .assert__border-box .expect {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

/*  
    0 Tests:
    - 0 Passed
    - 0 Failed */
/*  

### Clearfix Helper ------ */
/* - [mixin] susy-clearfix */
/* "Elements should clear floated children." */
.test__susy-clearfix .assert__clearfix .test {
  *zoom: 1;
}
.test__susy-clearfix .assert__clearfix .test:after {
  content: " ";
  display: block;
  clear: both;
}
.test__susy-clearfix .assert__clearfix .expect {
  *zoom: 1;
}
.test__susy-clearfix .assert__clearfix .expect:after {
  content: " ";
  display: block;
  clear: both;
}

/*  
    0 Tests:
    - 0 Passed
    - 0 Failed */
/*  

### Direction Helpers ------ */
/*  - [function] get-direction (2 Assertions, 2 Passed, 0 Failed) */
/*  - [function] to (2 Assertions, 2 Passed, 0 Failed) */
/*  - [function] from (2 Assertions, 2 Passed, 0 Failed) */
/*  
    3 Tests:
    - 3 Passed
    - 0 Failed */
/*  

### Nth- Helpers ------ */
/*  - [function] format-nth (2 Assertions, 2 Passed, 0 Failed) */
/*  
    1 Tests:
    - 1 Passed
    - 0 Failed */
/*  

### Settings Syntax ------ */
/*  - [mixin] set-grid (7 Assertions, 7 Passed, 0 Failed) */
/*  - [mixin] use-grid (6 Assertions, 6 Passed, 0 Failed) */
/*  - [function] parse-grid (72 Assertions, 72 Passed, 0 Failed) */
/*  - [function] get-setting (3 Assertions, 3 Passed, 0 Failed) */
/*  
    4 Tests:
    - 4 Passed
    - 0 Failed */
/*  

### Shared Context Language ------ */
/*  - [function] nested (3 Assertions, 3 Passed, 0 Failed) */
/*  - [mixin] nested (2 Assertions, 2 Passed, 0 Failed) */
/*  
    2 Tests:
    - 2 Passed
    - 0 Failed */
/*  

### Grid Background Syntax ------ */
/* - [mixin] background-grid */
/* "Background-grid should show 7 columns with .5 gutters" */
.test__background-grid .assert__background-grid .test {
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 15%, rgba(102, 102, 255, 0.25) 15%, rgba(179, 179, 255, 0.25) 25%, transparent 25%, transparent 30%, rgba(102, 102, 255, 0.25) 30%, rgba(179, 179, 255, 0.25) 40%, transparent 40%, transparent 45%, rgba(102, 102, 255, 0.25) 45%, rgba(179, 179, 255, 0.25) 55.0%, transparent 55.0%, transparent 60%, rgba(102, 102, 255, 0.25) 60%, rgba(179, 179, 255, 0.25) 70%, transparent 70%, transparent 75%, rgba(102, 102, 255, 0.25) 75%, rgba(179, 179, 255, 0.25) 85%, transparent 85%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
  background-origin: content-box;
  background-clip: content-box;
}
.test__background-grid .assert__background-grid .expect {
  background: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 15%, rgba(102, 102, 255, 0.25) 15%, rgba(179, 179, 255, 0.25) 25%, transparent 25%, transparent 30%, rgba(102, 102, 255, 0.25) 30%, rgba(179, 179, 255, 0.25) 40%, transparent 40%, transparent 45%, rgba(102, 102, 255, 0.25) 45%, rgba(179, 179, 255, 0.25) 55%, transparent 55%, transparent 60%, rgba(102, 102, 255, 0.25) 60%, rgba(179, 179, 255, 0.25) 70%, transparent 70%, transparent 75%, rgba(102, 102, 255, 0.25) 75%, rgba(179, 179, 255, 0.25) 85%, transparent 85%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
}

/* - [mixin] overlay-grid */
/* ".test and .expect should have same output." */
.test__overlay-grid .assert__overlay-grid .test head {
  display: block;
  position: fixed;
  left: 10px;
  bottom: 10px;
  z-index: 999;
  color: #333;
  border-radius: .25em;
  text-shadow: 0 0 3px #fff;
}
.test__overlay-grid .assert__overlay-grid .test head::before {
  content: "|||";
  display: block;
  padding: 10px 14px;
  letter-spacing: -1;
  font-family: sans-serif;
  font-size: 26px;
  font-weight: bold;
}
.test__overlay-grid .assert__overlay-grid .test head:hover {
  box-shadow: 0 0 3px rgba(51, 51, 51, 0.5);
  background: rgba(255, 255, 255, 0.5);
}
.test__overlay-grid .assert__overlay-grid .test head:hover ~ .sym,
.test__overlay-grid .assert__overlay-grid .test head:hover ~ body .sym {
  position: relative;
}
.test__overlay-grid .assert__overlay-grid .test head:hover ~ .sym::before,
.test__overlay-grid .assert__overlay-grid .test head:hover ~ body .sym::before {
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 15%, rgba(102, 102, 255, 0.25) 15%, rgba(179, 179, 255, 0.25) 25%, transparent 25%, transparent 30%, rgba(102, 102, 255, 0.25) 30%, rgba(179, 179, 255, 0.25) 40%, transparent 40%, transparent 45%, rgba(102, 102, 255, 0.25) 45%, rgba(179, 179, 255, 0.25) 55.0%, transparent 55.0%, transparent 60%, rgba(102, 102, 255, 0.25) 60%, rgba(179, 179, 255, 0.25) 70%, transparent 70%, transparent 75%, rgba(102, 102, 255, 0.25) 75%, rgba(179, 179, 255, 0.25) 85%, transparent 85%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
  background-origin: content-box;
  background-clip: content-box;
}
.test__overlay-grid .assert__overlay-grid .test head:hover ~ .asym,
.test__overlay-grid .assert__overlay-grid .test head:hover ~ body .asym {
  position: relative;
}
.test__overlay-grid .assert__overlay-grid .test head:hover ~ .asym::before,
.test__overlay-grid .assert__overlay-grid .test head:hover ~ body .asym::before {
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 4em, transparent 4em, transparent 5em, rgba(102, 102, 255, 0.25) 5em, rgba(179, 179, 255, 0.25) 13em, transparent 13em, transparent 14em, rgba(102, 102, 255, 0.25) 14em, rgba(179, 179, 255, 0.25) 26em, transparent 26em, transparent 27em, rgba(102, 102, 255, 0.25) 27em, rgba(179, 179, 255, 0.25) 35em, transparent 35em, transparent 36em, rgba(102, 102, 255, 0.25) 36em, rgba(179, 179, 255, 0.25));
  background-origin: content-box;
  background-clip: content-box;
}
.test__overlay-grid .assert__overlay-grid .expect head {
  border-radius: 0.25em;
  display: block;
  position: fixed;
  bottom: 10px;
  left: 10px;
  z-index: 999;
  color: #333;
  text-shadow: 0 0 3px #fff;
}
.test__overlay-grid .assert__overlay-grid .expect head::before {
  content: "|||";
  display: block;
  padding: 10px 14px;
  letter-spacing: -1;
  font-family: sans-serif;
  font-size: 26px;
  font-weight: bold;
}
.test__overlay-grid .assert__overlay-grid .expect head:hover {
  box-shadow: 0 0 3px rgba(51, 51, 51, 0.5);
  background: rgba(255, 255, 255, 0.5);
}
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ .sym,
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ body .sym {
  position: relative;
}
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ .sym::before,
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ body .sym::before {
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 15%, rgba(102, 102, 255, 0.25) 15%, rgba(179, 179, 255, 0.25) 25%, transparent 25%, transparent 30%, rgba(102, 102, 255, 0.25) 30%, rgba(179, 179, 255, 0.25) 40%, transparent 40%, transparent 45%, rgba(102, 102, 255, 0.25) 45%, rgba(179, 179, 255, 0.25) 55.0%, transparent 55.0%, transparent 60%, rgba(102, 102, 255, 0.25) 60%, rgba(179, 179, 255, 0.25) 70%, transparent 70%, transparent 75%, rgba(102, 102, 255, 0.25) 75%, rgba(179, 179, 255, 0.25) 85%, transparent 85%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
  background-origin: content-box;
  background-clip: content-box;
}
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ .asym,
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ body .asym {
  position: relative;
}
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ .asym::before,
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ body .asym::before {
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 4em, transparent 4em, transparent 5em, rgba(102, 102, 255, 0.25) 5em, rgba(179, 179, 255, 0.25) 13em, transparent 13em, transparent 14em, rgba(102, 102, 255, 0.25) 14em, rgba(179, 179, 255, 0.25) 26em, transparent 26em, transparent 27em, rgba(102, 102, 255, 0.25) 27em, rgba(179, 179, 255, 0.25) 35em, transparent 35em, transparent 36em, rgba(102, 102, 255, 0.25) 36em, rgba(179, 179, 255, 0.25));
  background-origin: content-box;
  background-clip: content-box;
}

/*  - [function] get-grid-color-stops (5 Assertions, 5 Passed, 0 Failed) */
/*  
    1 Tests:
    - 1 Passed
    - 0 Failed */
/*  

### Container Syntax ------ */
/* - [mixin] container */
/* "Containers should have 80% max-width and show a 7 .5 grid." */
.test__container .assert__default-box .test {
  *zoom: 1;
  max-width: 80%;
  margin-left: auto;
  margin-right: auto;
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 15%, rgba(102, 102, 255, 0.25) 15%, rgba(179, 179, 255, 0.25) 25%, transparent 25%, transparent 30%, rgba(102, 102, 255, 0.25) 30%, rgba(179, 179, 255, 0.25) 40%, transparent 40%, transparent 45%, rgba(102, 102, 255, 0.25) 45%, rgba(179, 179, 255, 0.25) 55.0%, transparent 55.0%, transparent 60%, rgba(102, 102, 255, 0.25) 60%, rgba(179, 179, 255, 0.25) 70%, transparent 70%, transparent 75%, rgba(102, 102, 255, 0.25) 75%, rgba(179, 179, 255, 0.25) 85%, transparent 85%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
  background-origin: content-box;
  background-clip: content-box;
}
.test__container .assert__default-box .test:after {
  content: " ";
  display: block;
  clear: both;
}
.test__container .assert__default-box .expect {
  *zoom: 1;
  max-width: 80%;
  margin-left: auto;
  margin-right: auto;
  background: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 15%, rgba(102, 102, 255, 0.25) 15%, rgba(179, 179, 255, 0.25) 25%, transparent 25%, transparent 30%, rgba(102, 102, 255, 0.25) 30%, rgba(179, 179, 255, 0.25) 40%, transparent 40%, transparent 45%, rgba(102, 102, 255, 0.25) 45%, rgba(179, 179, 255, 0.25) 55%, transparent 55%, transparent 60%, rgba(102, 102, 255, 0.25) 60%, rgba(179, 179, 255, 0.25) 70%, transparent 70%, transparent 75%, rgba(102, 102, 255, 0.25) 75%, rgba(179, 179, 255, 0.25) 85%, transparent 85%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
}
.test__container .assert__default-box .expect:after {
  content: " ";
  display: block;
  clear: both;
}

/* "Containers should have 40em max-width, border-box-sizing, and show a (1 2 3 2 1) (4em 2em) grid, flush left." */
.test__container .assert__border-box .test {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  *zoom: 1;
  max-width: 40em;
  margin-left: 0;
  margin-right: auto;
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 12.5%, rgba(102, 102, 255, 0.25) 12.5%, rgba(179, 179, 255, 0.25) 32.5%, transparent 32.5%, transparent 35%, rgba(102, 102, 255, 0.25) 35%, rgba(179, 179, 255, 0.25) 65%, transparent 65%, transparent 67.5%, rgba(102, 102, 255, 0.25) 67.5%, rgba(179, 179, 255, 0.25) 87.5%, transparent 87.5%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
  background-origin: content-box;
  background-clip: content-box;
}
.test__container .assert__border-box .test:after {
  content: " ";
  display: block;
  clear: both;
}
.test__container .assert__border-box .expect {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  *zoom: 1;
  max-width: 40em;
  margin-left: 0;
  margin-right: auto;
  background: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 12.5%, rgba(102, 102, 255, 0.25) 12.5%, rgba(179, 179, 255, 0.25) 32.5%, transparent 32.5%, transparent 35%, rgba(102, 102, 255, 0.25) 35%, rgba(179, 179, 255, 0.25) 65%, transparent 65%, transparent 67.5%, rgba(102, 102, 255, 0.25) 67.5%, rgba(179, 179, 255, 0.25) 87.5%, transparent 87.5%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
}
.test__container .assert__border-box .expect:after {
  content: " ";
  display: block;
  clear: both;
}

/*  - [function] container (5 Assertions, 5 Passed, 0 Failed) */
/*  - [function] get-container-width (5 Assertions, 5 Passed, 0 Failed) */
/*  
    2 Tests:
    - 2 Passed
    - 0 Failed */
/*  

### Span Syntax ------ */
/* - [mixin] span */
/* "Span should set width (75%), float (left), and gutter (5% margin-right)" */
.test__span .assert__default .test {
  width: 70%;
  float: left;
  margin-right: 5%;
}
.test__span .assert__default .test .inner {
  width: 35.71429%;
  float: left;
  margin-right: 7.14286%;
}
.test__span .assert__default .expect {
  width: 70%;
  float: left;
  margin-right: 5%;
}
.test__span .assert__default .expect .inner {
  width: 35.71429%;
  float: left;
  margin-right: 7.14286%;
}

/* "Span should set width, float, inside gutter, and border-box" */
.test__span .assert__inside .test {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  width: 62.5%;
  float: left;
  padding-left: 1.25%;
  padding-right: 1.25%;
}
.test__span .assert__inside .expect {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  width: 62.5%;
  float: left;
  padding-left: 1.25%;
  padding-right: 1.25%;
}

.span-content-test {
  width: 66.10169%;
  float: left;
  margin-right: 1.69492%;
  width: 35.89744%;
  float: left;
  margin-right: 2.5641%;
}

/*  - [mixin] span (3 Assertions, 3 Passed, 0 Failed) */
/*  - [function] span (6 Assertions, 6 Passed, 0 Failed) */
/*  - [function] parse-span (99 Assertions, 99 Passed, 0 Failed) */
/*  - [function] span-get (13 Assertions, 13 Passed, 0 Failed) */
/*  - [function] get-span-width (7 Assertions, 7 Passed, 0 Failed) */
/*  - [function] span-math (9 Assertions, 9 Passed, 0 Failed) */
/*  - [function] get-span-context (1 Assertions, 1 Passed, 0 Failed) */
/*  
    7 Tests:
    - 7 Passed
    - 0 Failed */
/*

### Grid Background API ------ */
/* - [mixin] background-grid-output */
/* "Elements should show a horizontal clipped red-green-blue gradient, and a vertical baseline" */
.test__background-grid-output .assert__show .test {
  background-image: linear-gradient(to bottom, black 5%, transparent 5%), linear-gradient(to right, #ffcccc, #ccffcc 25%, #ccccff);
  background-size: 100% 24px;
  background-position: left top;
  background-origin: border-box, content-box;
  background-clip: border-box, content-box;
}
.test__background-grid-output .assert__show .expect {
  background-image: linear-gradient(to bottom, black 5%, transparent 5%), linear-gradient(to right, #ffcccc, #ccffcc 25%, #ccccff);
  background-size: 100% 24px;
  background-position: left top;
  background-origin: border-box, content-box;
  background-clip: border-box, content-box;
}

/* "Elements should show a horizontal clipped red-green-blue gradient, without baseline" */
.test__background-grid-output .assert__show-columns .test {
  background-image: linear-gradient(to right, #ffcccc, #ccffcc 25%, #ccccff);
  background-origin: content-box;
  background-clip: content-box;
}
.test__background-grid-output .assert__show-columns .expect {
  background: linear-gradient(to right, #ffcccc, #ccffcc 25%, #ccccff);
  background-origin: content-box;
  background-clip: content-box;
}

/* "Elements should show a vertical baseline" */
.test__background-grid-output .assert__show-baseline .test {
  background-image: linear-gradient(to bottom, black 5%, transparent 5%);
  background-size: 100% 24px;
  background-position: left top;
}
.test__background-grid-output .assert__show-baseline .expect {
  background: linear-gradient(to bottom, black 5%, transparent 5%);
  background-size: 100% 24px;
  background-position: left top;
}

/* "Elements should not show any grid background" */
/*

### Shared Container API ------ */
/* - [mixin] container-output */
/* "Containers should have 60em max-width, centered." */
.test__container-output .assert__fluid .test {
  max-width: 60em;
  margin-left: auto;
  margin-right: auto;
}
.test__container-output .assert__fluid .expect {
  max-width: 60em;
  margin-left: auto;
  margin-right: auto;
}

/* "Containers should have 30em width, flush right." */
.test__container-output .assert__static .test {
  width: 30em;
  margin-left: auto;
  margin-right: 0;
}
.test__container-output .assert__static .expect {
  width: 30em;
  margin-left: auto;
  margin-right: 0;
}

/* "Containers should have 100% width." */
.test__container-output .assert__auto .test {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
}
.test__container-output .assert__auto .expect {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
}

/*

### Shared Margin API ------ */
/* - [mixin] margin-output */
/* "Elements should have 25% right margin, 8em left." */
.test__margin-output .assert__margin-output .test {
  margin-right: 25%;
  margin-left: 8em;
}
.test__margin-output .assert__margin-output .expect {
  margin-right: 25%;
  margin-left: 8em;
}

/*

### Shared Padding API ------ */
/* - [mixin] padding-output */
/* "Elements should have 25% right padding, 8em left." */
.test__padding-output .assert__padding-output .test {
  padding-right: 25%;
  padding-left: 8em;
}
.test__padding-output .assert__padding-output .expect {
  padding-right: 25%;
  padding-left: 8em;
}

/*

### Float Container API ------ */
/* - [mixin] float-container */
/* "Containers should be 30em wide, flush left." */
.test__float-container .assert__float-container .test {
  *zoom: 1;
  max-width: 30em;
  margin-left: 0;
  margin-right: auto;
}
.test__float-container .assert__float-container .test:after {
  content: " ";
  display: block;
  clear: both;
}
.test__float-container .assert__float-container .expect {
  max-width: 30em;
  margin-left: 0;
  margin-right: auto;
}
.test__float-container .assert__float-container .expect:after {
  content: "";
  display: table;
  clear: both;
}

/*

### Float Span API ------ */
/* - [mixin] float-span-output */
/* "Output should be 25%, floated left, with matching margins/padding" */
.test__float-span-output .assert__full .test {
  width: 25%;
  float: left;
  margin-left: 5em;
  margin-right: 2em;
  padding-left: 3em;
  padding-right: 4em;
}
.test__float-span-output .assert__full .expect {
  width: 25%;
  float: left;
  margin-left: 5em;
  margin-right: 2em;
  padding-left: 3em;
  padding-right: 4em;
}

/* "Output should be 25%, floated right" */
.test__float-span-output .assert__float-to .test {
  width: 25%;
  float: right;
}
.test__float-span-output .assert__float-to .expect {
  width: 25%;
  float: right;
}

/* "Output should be 25%, not floated" */
.test__float-span-output .assert__float-null .test {
  width: 25%;
}
.test__float-span-output .assert__float-null .expect {
  width: 25%;
}

/*

### Float End API ------ */
/* - [mixin] float-last */
/* "Items should float flush right." */
.test__float-last .assert__default .test {
  float: right;
  margin-right: 0;
}
.test__float-last .assert__default .expect {
  float: right;
  margin-right: 0;
}

/* "Items should not have any right margin." */
.test__float-last .assert__last-flow-from .test {
  margin-right: 0;
}
.test__float-last .assert__last-flow-from .expect {
  margin-right: 0;
}

/* - [mixin] float-first */
/* "Items should float flush left." */
.test__float-first .assert__float-first .test {
  margin-left: 0;
}
.test__float-first .assert__float-first .expect {
  margin-left: 0;
}

/*

### Isolation API ------ */
/* - [mixin] isolate-output */
/* "Isolation at 30%, has 30% left margin and -100% right margin." */
.test__isolate-output .assert__isolate-output .test {
  float: left;
  margin-left: 30%;
  margin-right: -100%;
}
.test__isolate-output .assert__isolate-output .expect {
  float: left;
  margin-left: 30%;
  margin-right: -100%;
}
