// Grid Syntax Tests
// =================

$original-columns             : $columns;
$original-gutters             : $gutters;
$original-container           : $container;
$original-column-width        : $column-width;
$original-layout-math         : $layout-math;
$original-layout-method       : $layout-method;
$original-flow                : $flow;
$original-container-position  : $container-position;
$original-gutter-position     : $gutter-position;
$original-show-grids          : $show-grids;
$original-box-sizing          : $box-sizing;

@mixin original-grid {
  $columns              : $original-columns;
  $gutters              : $original-gutters;
  $container            : $original-container;
  $column-width         : $original-column-width;
  $layout-math          : $original-layout-math;
  $layout-method        : $original-layout-method;
  $flow                 : $original-flow;
  $container-position   : $original-container-position;
  $gutter-position      : $original-gutter-position;
  $show-grids           : $original-show-grids;
  $box-sizing           : $original-box-sizing;
}

@mixin assert-grid(
  $name,
  $this-columns               : $original-columns,
  $this-gutters               : $original-gutters,
  $this-container             : $original-container,
  $this-column-width          : $original-column-width,
  $this-layout-math           : $original-layout-math,
  $this-layout-method         : $original-layout-method,
  $this-flow                  : $original-flow,
  $this-container-position    : $original-container-position,
  $this-gutter-position       : $original-gutter-position,
  $this-show-grids            : $original-show-grids,
  $this-box-sizing            : $original-box-sizing
) {
  @include assert-equal($columns, $this-columns,
    '[#{$name}] $columns should be equal to #{$this-columns}');
  @include assert-equal($gutters, $this-gutters,
    '[#{$name}] $gutters should be equal to #{$this-gutters}');
  @include assert-equal($container, $this-container,
    '[#{$name}] $container should be equal to #{$this-container}');
  @include assert-equal($column-width, $this-column-width,
    '[#{$name}] $column-width should be equal to #{$this-column-width}');
  @include assert-equal($layout-math, $this-layout-math,
    '[#{$name}] $layout-math should be equal to #{$this-layout-math}');
  @include assert-equal($layout-method, $this-layout-method,
    '[#{$name}] $layout-method should be equal to #{$this-layout-method}');
  @include assert-equal($flow, $this-flow,
    '[#{$name}] $flow should be equal to #{$this-flow}');
  @include assert-equal($container-position, $this-container-position,
    '[#{$name}] $container-position should be equal to #{$this-container-position}');
  @include assert-equal($gutter-position, $this-gutter-position,
    '[#{$name}] $gutter-position should be equal to #{$this-gutter-position}');
  @include assert-equal($show-grids, $this-show-grids,
    '[#{$name}] $show-grids should be equal to #{$this-show-grids}');
  @include assert-equal($box-sizing, $this-box-sizing,
    '[#{$name}] $box-sizing should be equal to #{$this-box-sizing}');
}

@mixin reset-grid(
  $name
) {
  @include original-grid;
  @include assert-grid($name);
}

@include test-module('Shared Grid-Settings Language') {

  // Original-Grid Helpers
  // ---------------------

  @include test('Original-Grid Helpers') {
    @include assert-grid('grid-test-helpers: init');
    $columns: 1 1 2 3 5 8 13;
    @include assert-unequal($columns, $original-columns,
      '$columns should not equal $original-columns.');
    @include reset-grid('grid-test-helpers: reset');
  }

  // [mixin] set-grid
  // ----------------

  @include test('[mixin] set-grid') {
    $columns              : 4;
    $gutters              : 1/3;
    $container            : auto;
    $column-width         : 6em;
    $layout-math          : fluid;
    $layout-method        : float;
    $flow                 : rtl;
    $container-position   : center;
    $gutter-position      : after;
    $show-grids           : show;
    $box-sizing           : false;

    $grid: 960px (1 2 3 2) .25 static isolate ltr left split hide border-box;
    @include set-grid($grid);

    @include assert-grid('set-grid: asym',
      $this-columns: 1 2 3 2,
      $this-gutters: .25,
      $this-container: 960px,
      $this-column-width: false,
      $this-layout-math: static,
      $this-layout-method: isolate,
      $this-flow: ltr,
      $this-container-position: left,
      $this-gutter-position: split,
      $this-show-grids: hide,
      $this-box-sizing: border-box
    );

    $grid: 12 (6em 1em) show-baseline float;
    @include set-grid($grid);

    @include assert-grid('set-grid: sym',
      $this-columns: 12,
      $this-gutters: 1/6,
      $this-container: auto,
      $this-column-width: 6em,
      $this-layout-math: static,
      $this-layout-method: float,
      $this-flow: ltr,
      $this-container-position: left,
      $this-gutter-position: split,
      $this-show-grids: show-baseline,
      $this-box-sizing: false
    );

    @include reset-grid('set-grid: reset');
  }

  // [mixin] use-grid
  // ----------------

  @include test('[mixin] use-grid') {
    @include assert-grid('use-grid: init');

    // symmetrical
    $grid: 960px 9 2/6 static split;
    @include use-grid($grid) {

      @include assert-grid('use-grid: sym',
        $this-columns: 9,
        $this-gutters: 2/6,
        $this-container: 960px,
        $this-column-width: false,
        $this-layout-math: static,
        $this-gutter-position: split
      );

    }

    @include assert-grid('use-grid: after-sym');

    // asymmetrical
    $grid: (1 2 4 3 1) (6em 2em) float split;
    @include use-grid($grid) {

      @include assert-grid('use-grid: asym',
        $this-columns: 1 2 4 3 1,
        $this-gutters: 2/6,
        $this-container: auto,
        $this-column-width: 6em,
        $this-layout-method: float,
        $this-gutter-position: split
      );

    }

    @include assert-grid('use-grid: after-asym');
  }

  // [function] get-grid
  // -------------------

  @include test('[function] get-grid') {
    $columns              : 4;
    $gutters              : 1/3;
    $container            : auto;
    $column-width         : 6em;
    $layout-math          : fluid;
    $layout-method        : float;
    $flow                 : rtl;
    $container-position   : center;
    $gutter-position      : after;
    $show-grids           : show;
    $box-sizing           : false;

    @include assert-grid('get-grid: sym',
      $this-columns              : 4,
      $this-gutters              : 1/3,
      $this-container            : auto,
      $this-column-width         : 6em,
      $this-layout-math          : fluid,
      $this-layout-method        : float,
      $this-flow                 : rtl,
      $this-container-position   : center,
      $this-gutter-position      : after,
      $this-show-grids           : show,
      $this-box-sizing           : false
    );

    $grid: get-grid();
    $expect: auto 4 (6em 2em) fluid float center show rtl after;
    @include assert-equal($grid, $expect,
      '[get-grid: sym2] $grid should be equal to "#{$expect}"');

    $container: 960px;
    $columns: 1 2 3 5 8;
    $column-width: false;
    $grid: get-grid();
    $expect: 960px (1 2 3 5 8) 1/3 fluid float center show rtl after;
    @include assert-equal($grid, $expect,
      '[get-grid: asym] $grid should be equal to "#{$expect}"');

    @include reset-grid('get-grid: reset');
  }

  // [function] parse-grid
  // ---------------------

  @include test('[function] parse-grid') {
    $grid: parse-grid(960px 4 1/4 border-box);
    $expect: 4 1/4 960px false false false false false false false border-box;
    @include assert-equal($grid, $expect,
      'Parsed "#{$grid}" should be equal to "#{$expect}"');

    $grid: parse-grid((1 2 3 5 8) (6em 1em) static isolate split rtl hide);
    $expect: (1 2 3 5 8) 1/6 false 6em static isolate false rtl split hide false;
    @include assert-equal($grid, $expect,
      'Parsed "#{$grid}" should be equal to "#{$expect}"');

    $grid: parse-grid(auto (1 2 3 5 8) (6em 1em) static isolate split rtl hide);
    $expect: (1 2 3 5 8) 1/6 auto 6em static isolate false rtl split hide false;
    @include assert-equal($grid, $expect,
      'Parsed "#{$grid}" should be equal to "#{$expect}"');
  }

  // [function] get-setting
  // ----------------------

  @include test('[function] get-setting') {
    $grid: 960px 4 1/4 border-box float fluid before show;
    $pre: parse-grid($grid);

    $a: get-setting(box-sizing, $grid, parse);
    $b: get-setting(box-sizing, $pre);

    // parsing
    @include assert-equal($a, $b,
      'Get-setting should be the same whether pre-parsed or not');

    // border-box
    @include assert-equal($a, border-box,
      'Box-sizing of "#{$grid}" should be "border-box"');

    // columns
    $test: get-setting(columns, $pre);
    $expect: 4;
    @include assert-equal($test, $expect,
      'Columns of "#{$pre}" should be "#{$expect}"');

    // gutters
    $test: get-setting(gutters, $pre);
    $expect: 1/4;
    @include assert-equal($test, $expect,
      'Gutters of "#{$pre}" should be "#{$expect}"');

    // container
    $test: get-setting(container, $pre);
    $expect: 960px;
    @include assert-equal($test, $expect,
      'Container of "#{$pre}" should be "#{$expect}"');

    // column-width
    $test: get-setting(column-width, $pre);
    $expect: false;
    @include assert-equal($test, $expect,
      'Column-width of "#{$pre}" should be "#{$expect}"');

    // asymmetric grid
    $grid: (1 6 4 3 2) (6em 1em) float before;

    // container
    $test: get-setting(container, $grid, parse);
    $expect: false;
    @include assert-equal($test, $expect,
      'Container of "#{$grid}" should be "#{$expect}"');

    // column-width
    $test: get-setting(column-width, $grid, parse);
    $expect: 6em;
    @include assert-equal($test, $expect,
      'Column-width of "#{$grid}" should be "#{$expect}"');

    // layout-method
    $test: get-setting(layout-method, $grid, parse);
    $expect: float;
    @include assert-equal($test, $expect,
      'Isolate of "#{$grid}" should be "#{$expect}"');

    // layout-math
    $test: get-setting(layout-math, $grid, parse);
    $expect: false;
    @include assert-equal($test, $expect,
      'Static of "#{$grid}" should be "#{$expect}"');

    // auto container
    $grid: auto;
    $test: get-setting(container, $grid, parse);
    $expect: auto;
    @include assert-equal($test, $expect,
      'Container of "#{$grid}" should be "#{$expect}"');
  }

}