// Container Syntax
// ================

@include test-module('Container Syntax') {

  // container [mixin]
  // -----------------

  @include output-test('container') {
    @include set-grid(80% 7 .5);
    @include assert-setup(default-box);
    @include assert-output(
      'Containers should have 80% max-width and show a 7 .5 grid.'
    ) {
      .test { @include container(show-columns); }
      .expect {
        @include pie-clearfix;
        max-width: 80%;
        margin-left: auto;
        margin-right: auto;
        background: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 15%, rgba(102, 102, 255, 0.25) 15%, rgba(179, 179, 255, 0.25) 25%, transparent 25%, transparent 30%, rgba(102, 102, 255, 0.25) 30%, rgba(179, 179, 255, 0.25) 40%, transparent 40%, transparent 45%, rgba(102, 102, 255, 0.25) 45%, rgba(179, 179, 255, 0.25) 55.0%, transparent 55.0%, transparent 60%, rgba(102, 102, 255, 0.25) 60%, rgba(179, 179, 255, 0.25) 70%, transparent 70%, transparent 75%, rgba(102, 102, 255, 0.25) 75%, rgba(179, 179, 255, 0.25) 85%, transparent 85%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
      }
    }

    @include set-grid((1 2 3 2 1) (4em 1em) show-columns);
    @include assert-setup(border-box);
    @include assert-output(
      'Containers should have 40em max-width, border-box-sizing, and show a (1 2 3 2 1) (4em 2em) grid, flush left.'
    ) {
      .test { @include container(auto left border-box); }
      .expect {
        @include box-sizing(border-box);
        @include pie-clearfix;
        max-width: 40em;
        margin-left: 0;
        margin-right: auto;
        background: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 12.5%, rgba(102, 102, 255, 0.25) 12.5%, rgba(179, 179, 255, 0.25) 32.5%, transparent 32.5%, transparent 35%, rgba(102, 102, 255, 0.25) 35%, rgba(179, 179, 255, 0.25) 65%, transparent 65%, transparent 67.5%, rgba(102, 102, 255, 0.25) 67.5%, rgba(179, 179, 255, 0.25) 87.5%, transparent 87.5%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
      }
    }
  }

  // container [function]
  // --------------------

  @include test('[function] container') {

    // explicit
    $grid: 960px 12 .25 left static;
    $width: container($grid);
    $expect: 960px;

    @include assert-equal($width, $expect,
      'The container-width of "#{$grid}" should be #{$expect}');

    // calculated
    $grid: 12 (6em 1em);
    $width: container($grid);
    $expect: 83em;

    @include assert-equal($width, $expect,
      'The container-width of "#{$grid}" should be #{$expect}');

    // default
    $grid: (1 3 4 2 1) .25;
    $width: container($grid);
    $expect: 100%;

    @include assert-equal($width, $expect,
      'The container-width of "#{$grid}" should be #{$expect}');

    @include use-grid(960px 12 .25) {
      $width: container(isolate);
      $expect: 960px;
      @include assert-equal($width, $expect,
        'Omitted grid-widths should still be respected.');

      $width: container(auto 10);
      $expect: 100%;
      @include assert-equal($width, $expect,
        'Auto container-width should override existing grid.');
    }

  }

  // get-container-width
  // -------------------

  @include test('[function] get-container-width') {
    // args: $container, $column-width, $columns, $gutters, $gutter-position

    // explicit
    $test: get-container-width(80em);
    $expect: 80em;
    @include assert-equal($test, $expect,
      'An explicit container width should be returned without changes.');

    // no info
    $test: get-container-width(false, false);
    $expect: 100%;
    @include assert-equal($test, $expect,
      'An empty container value should return 100%.');

    // not enough info
    $test: get-container-width(auto, false);
    $expect: 100%;
    @include assert-equal($test, $expect,
      'An auto container with no specified widths should return 100%.');

    // calculated (outside-gutters)
    $test: get-container-width(auto, 4em, 7, .5, after);
    $expect: 40em;
    @include assert-equal($test, $expect,
      'The container for "7 (4em 2em) after" should return 40em.');

    // calculated (inside-gutters)
    $test: get-container-width(auto, 4em, 7, .5, inside);
    $expect: 42em;
    @include assert-equal($test, $expect,
      'The container for "7 (4em 2em) inside" should return 42em.');

  }

}
