// Bleed Syntax Tests
// ==================

@include test-module('Bleed Syntax') {

  // bleed [mixin]
  // -------------
  @include output-test('bleed') {

    // simple
    @include assert-setup('simple', $grid: 9 .5) {
      .nest { @include squish(1); }
    }
    @include assert-output(
      'Items should bleed 1 column outside their nested context'
    ) {
      .test { @include bleed(0 1 of 7); }
      .expect {
        margin-left: -15%;
        padding-left: 15%;
        margin-right: -15%;
        padding-right: 15%;
      }
    }

    // explicit inside-static
    @include assert-setup('inside', $grid: 10 (4em 1em) inside-static) {
      .nest {
        @include rhythm-margins;
        @include squish(1);
      }
    }
    @include assert-output(
      'Items should bleed 1em on all sides, and retain their static gutters'
    ) {
      .test { @include bleed(1em of 8); }
      .expect {
        margin-top: -1em;
        padding-top: 1em;
        margin-right: -1em;
        padding-right: 1.5em;
        margin-bottom: -1em;
        padding-bottom: 1em;
        margin-left: -1em;
        padding-left: 1.5em;
      }
    }
  }

  // bleed-x [mixin]
  // ---------------

  @include output-test('bleed-x') {

    // simple
    @include assert-setup('simple', $grid: 11 .5) {
      .nest { @include squish(2); }
    }
    @include assert-output(
      'Items should bleed 1 column left, and 2 columns right'
    ) {
      .test { @include bleed-x(1 2 of 7); }
      .expect {
        margin-left: -15%;
        padding-left: 15%;
        margin-right: -30%;
        padding-right: 30%;
      }
    }

    // inside
    @include assert-setup('inside', $grid: 10 .25 inside) {
      .nest { @include squish(1); }
    }
    @include assert-output(
      'Items should bleed 1 column, and retain their gutters'
    ) {
      .test { @include bleed-x(1 of 8); }
      .expect {
        margin-left: -12.5%;
        padding-left: 13.75%;
        margin-right: -12.5%;
        padding-right: 13.75%;
      }
    }
  }

  // bleed-y [mixin]
  // ---------------

  @include output-test('bleed-y') {

    // simple
    @include assert-setup('simple', $grid: 11 .5) {
      .nest {
        @include rhythm-margins(1);
        @include squish(1);
      }
    }
    @include assert-output(
      'Items should bleed .5em top, and 1em bottom.'
    ) {
      .test { @include bleed-y(.5em 1em); }
      .expect {
        margin-top: -.5em;
        padding-top: .5em;
        margin-bottom: -1em;
        padding-bottom: 1em;
      }
    }
  }

  // parse-bleed [function]
  // ----------------------

  @include test('[function] parse-bleed') {

    $test: parse-bleed(1em 2em 3em 1em of 10 inside);
    $expect: map-merge($susy-defaults, (
      span: 1em 2em 3em 1em,
      columns: 10,
      gutter-position: inside,
      spread: wide,
    ));
    @include assert-equal($test, $expect,
      'Returns multiple spans as a list, along with context.');
  }

}
