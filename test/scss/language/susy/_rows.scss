// Row Start & End
// ===============

@include output-test-module('Row Syntax') {

  // break
  // -----

  @include output-test('break') {
    @include assert-setup($grid: 7 .5 inside) {
      .spacer { @include span(2); }
    }
    @include assert-output(
      'breaks should clear preceeding floats'
    ) {
      .test { @include break; }
      .expect { clear: both; }
    }
  }

  // nobreak
  // -------

  @include output-test('nobreak') {
    @include assert-setup($grid: 7 .5 inside) {
      .spacer { @include span(2); }
      .test, .expect { @include break; }
    }
    @include assert-output(
      'Non-breaks should not clear floated elements'
    ) {
      .test { @include nobreak; }
      .expect { clear: none; }
    }
  }

  // full
  // ---

  @include output-test('full') {
    @include assert-setup('split', $grid: 8 .25 split) {
      .spacer { @include span(2); }
    }
    @include assert-output(
      'Full spans clear preceeding floats, and have gutters.'
    ) {
      .test { @include full; }
      .expect {
        @include break;
        @include span(100% - get-gutter-width());
      }
    }

    @include assert-setup('after', $grid: 7 .5 after) {
      .spacer { @include span(2); }
    }
    @include assert-output(
      'Full spans clear preceeding floats, and have gutters.'
    ) {
      .test { @include full; }
      .expect {
        @include break;
        @include span(100%);
      }
    }
  }

  // first
  // -----

  @include output-test('first') {
    // before
    @include assert-setup('before', $grid: 7 .5 before) {
      .test, .expect {
        @include span(2);
        clear: left;
      }
    }
    @include assert-output(
      'First items should have left margins removed.'
    ) {
      .test { @include first; }
      .expect { margin-left: 0; }
    }

    // split
    @include assert-setup('split', $grid: 8 .25 split) {
      .test, .expect {
        @include span(2);
        clear: left;
      }
    }
    @include assert-output(
      'Nothing should happen to split first items.'
    ) {
      .test { @include first; }
    }
  }

  // alpha
  // -----

  @include output-test('alpha') {
    @include assert-setup($grid: 7 .5 before) {
      .test, .expect {
        @include span(2);
        clear: left;
      }
    }
    @include assert-output(
      'Alpha items should have left margins removed.'
    ) {
      .test { @include alpha; }
      .expect { margin-left: 0; }
    }
  }

  // last
  // ----

  @include output-test('last') {
    // after
    @include assert-setup('after', $grid: 7 .5 after) {
      .test, .expect {
        @include span(2);
        clear: both;
      }
    }
    @include assert-output(
      'Last items should float right, with right margins removed'
    ) {
      .test { @include last; }
      .expect {
        float: right;
        margin-right: 0;
      }
    }

    // split
    @include assert-setup('split', $grid: 7 .5 split) {
      .test, .expect {
        @include span(2);
        clear: both;
      }
    }
    @include assert-output(
      'Last items should float right.'
    ) {
      .test { @include last; }
      .expect { float: right; }
    }
  }

  // omega
  // -----

  @include output-test('omega') {
    @include assert-setup($grid: 7 .5 after) {
      .test, .expect {
        @include span(2);
        clear: both;
      }
    }
    @include assert-output(
      'Omega items should float right, with right margins removed'
    ) {
      .test { @include omega; }
      .expect {
        float: right;
        margin-right: 0;
      }
    }
  }

}
