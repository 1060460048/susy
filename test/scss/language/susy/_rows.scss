// Row Start & End
// ===============

@include output-test-module('Row Syntax') {

  // row
  // ---

  @include output-test('row') {
    @include assert-setup($grid: 7 .5 inside) {
      .spacer { @include span(2); }
    }
    @include assert-output(
      'Rows should clear preceeding floats, and contain inner floats'
    ) {
      .test { @include row; }
      .expect {
        @include susy-clearfix;
        clear: both;
      }
    }
  }

  // unrow
  // -----

  @include output-test('unrow') {
    @include assert-setup($grid: 7 .5 inside) {
      .spacer { @include span(2); }
      .test, .expect { @include row; }
    }
    @include assert-output(
      'Non-rows should not clear or wrap floated elements'
    ) {
      .test { @include unrow; }
      .expect {
        clear: none;
        &:after {
          content: none;
          display: inline;
          clear: none;
        }
      }
    }
  }

  // full
  // ---

  @include output-test('full') {
    @include assert-setup($grid: 7 .5 split) {
      .spacer { @include span(2); }
    }
    @include assert-output(
      'Full spans clear preceeding floats, and have gutters.'
    ) {
      .test { @include full; }
      .expect {
        @include row;
        @include gutters;
        float: none;
        width: auto;
      }
    }
  }

  // first
  // -----

  @include output-test('first') {
    // before
    @include assert-setup('before', $grid: 7 .5 before) {
      .test, .expect {
        @include span(2);
        clear: left;
      }
    }
    @include assert-output(
      'First items should have left margins removed.'
    ) {
      .test { @include first; }
      .expect { margin-left: 0; }
    }

    // split
    @include assert-setup('split', $grid: 8 .25 split) {
      .test, .expect {
        @include span(2);
        clear: left;
      }
    }
    @include assert-output(
      'Nothing should happen to split first items.'
    ) {
      .test { @include first; }
    }
  }

  // alpha
  // -----

  @include output-test('alpha') {
    @include assert-setup($grid: 7 .5 before) {
      .test, .expect {
        @include span(2);
        clear: left;
      }
    }
    @include assert-output(
      'Alpha items should have left margins removed.'
    ) {
      .test { @include alpha; }
      .expect { margin-left: 0; }
    }
  }

  // nth-first
  // ---------

  @include output-test('nth-first') {
    @include assert-setup($grid: 7 .5 split) {
      .test, .expect {
        @include span(2);
        clear: left;
      }
    }
    @include assert-output(
      'Nth-first (first-child) items should have left margins removed.'
    ) {
      .test { @include nth-first; }
    }
  }

  // nth-alpha
  // ---------

  @include output-test('nth-alpha') {
    @include assert-setup($grid: 7 .5 before) {
      .test, .expect {
        @include span(2);
        clear: left;
      }
    }
    @include assert-output(
      'Nth-alpha (first-child) items should have left margins removed'
    ) {
      .test { @include nth-alpha; }
      .expect { margin-left: 0; }
    }
  }

  // last
  // ----

  @include output-test('last') {
    // after
    @include assert-setup('after', $grid: 7 .5 after) {
      .test, .expect {
        @include span(2);
        clear: both;
      }
    }
    @include assert-output(
      'Last items should float right, with right margins removed'
    ) {
      .test { @include last; }
      .expect {
        float: right;
        margin-right: 0;
      }
    }

    // split
    @include assert-setup('split', $grid: 7 .5 split) {
      .test, .expect {
        @include span(2);
        clear: both;
      }
    }
    @include assert-output(
      'Last items should float right.'
    ) {
      .test { @include last; }
      .expect { float: right; }
    }
  }

  // omega
  // -----

  @include output-test('omega') {
    @include assert-setup($grid: 7 .5 after) {
      .test, .expect {
        @include span(2);
        clear: both;
      }
    }
    @include assert-output(
      'Omega items should float right, with right margins removed'
    ) {
      .test { @include omega; }
      .expect {
        float: right;
        margin-right: 0;
      }
    }
  }

  // nth-last
  // --------

  @include output-test('nth-last') {
    @include assert-setup($grid: 7 .5 split) {
      .test, .expect {
        @include span(2);
        clear: both;
      }
    }
    @include assert-output(
      'nth-last(2, last-child) items should float right.'
    ) {
      .test { @include nth-last(2, last-child); }
      .expect {
        float: right;
      }
    }
  }

  // nth-omega
  // ---------

  @include output-test('nth-omega') {
    @include assert-setup($grid: 7 .5 after) {
      .test, .expect {
        @include span(2);
        clear: both;
      }
    }
    @include assert-output(
      'nth-omega(2, last-child) items should float right, with right margins removed.'
    ) {
      .test { @include nth-omega(2, last-child); }
      .expect {
        float: right;
        margin-right: 0;
      }
    }
  }

}
