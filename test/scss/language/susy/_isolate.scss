// Isolation Syntax
// ================

@include test-module('Isolation Syntax') {

  // isolate
  // -------

  @include output-test('isolate') {
    @include assert-setup($grid: 7 .5 rtl) {
      .test, .expect {
        @include span(last 2);
        clear: both;
      }
    }
    @include assert-output(
      'Item should be isolated in the last 2 columns, right-to-left'
    ) {
      .test { @include isolate(last 2); }
      .expect {
        float: right;
        margin-right: 75%;
        margin-left: -100%;
      }
    }
  }

  // get-isolation
  // -------------

  @include test('[function] get-isolation') {
    // args: $span, $location [, $columns, $gutters, $column-width, $layout-math ]

    // explicit
    $location: 30%;
    $test: get-isolation((span: 1, location: $location));
    $expect: $location;
    @include assert-equal($test, $expect,
      'Explicit isolation placements should be passed back unchanged.');

    // first
    $test: get-isolation((span: 1, location: first));
    $expect: null;
    @include assert-equal($test, $expect,
      'Isolation in the first column doesnt require any prefixed margins.');

    // calculated
    $test: get-isolation((
      span: 2,
      location: last,
      columns: 7,
      gutters: .5,
      column-width: 4em,
      layout-math: static,
    ));
    $expect: 30em;
    @include assert-equal($test, $expect,
      'Isolation for "last 2 of 7 (4em 2em) static" (5 wide) should be 30em.');

    // split
    $test: get-isolation((
      span: 2,
      location: first,
      columns: 8,
      gutters: .25,
      column-width: 4em,
      layout-math: fluid,
      gutter-position: split,
    ));
    $expect: 1.25%;
    @include assert-equal($test, $expect,
      'Returns isolation value for first split element.');
  }

}
