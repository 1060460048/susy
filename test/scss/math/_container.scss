// Container Math Tests
// ====================

@include test-module('Container Math') {

  // Parse Container Position
  // ------------------------

  @include test('[function] parse-container-position') {
    // 2-part list
    $pos: 10% auto;
    $parsed: parse-container-position($pos);
    @include assert-equal($pos, $parsed,
      'A 2-part list is already a valid container position.');

    // left
    $pos: left;
    $parsed: parse-container-position($pos);
    @include assert-equal($parsed, 0 null,
      'A left-aligned container should have 0 margin-left, and null right.');

    // right
    $pos: right;
    $parsed: parse-container-position($pos);
    @include assert-equal($parsed, null 0,
      'A right-aligned container should have 0 margin-right, and null left.');

    // center
    $pos: center;
    $parsed: parse-container-position($pos);
    @include assert-equal($parsed, auto auto,
      'A centered container should have auto left and right margins.');

    // number
    $pos: 10%;
    $parsed: parse-container-position($pos);
    @include assert-equal($pos $pos, $parsed,
      'A number should be used for both left and right container margins.');

    // string
    $pos: auto;
    $parsed: parse-container-position($pos);
    @include assert-equal($pos $pos, $parsed,
      'A string should be used for both left and right container margins.');
  }

  // Calculate Container Width
  // -------------------------

  @include test('[function] calculate-container-width') {
    $c: 4;
    $g: 1/4;
    $w: 4em;

    // standard
    $width: calculate-container-width($c, $g, $w);
    @include assert-equal($width, 19em,
      'A normal 4-column container with (4em 1em) columns should return 19em.');

    // outer
    $width: calculate-container-width($c, $g, $w, outer);
    @include assert-equal($width, 20em,
      'An outer 4-column container with (4em 1em) columns should return 20em.');
  }

}
