// Location Math Tests
// ===================

@include test-module('Location Math') {

  // Is Last
  // -------

  @include test('[function] is-last') {
    $columns: 12;

    // keyword last
    $span: 3;
    $location: last;
    $test: is-last($span, $location, $columns);
    $expect: $columns - $span + 1;
    @include assert-equal($test, $expect,
      'Last is last, and returns the final position for the given span.');

    // keyword omega
    $span: 4;
    $location: omega;
    $test: is-last($span, $location, $columns);
    @include assert-true($test,
      'Omega is last.');

    // keyword first
    $span: 4;
    $location: first;
    $test: is-last($span, $location, $columns);
    @include assert-false($test,
      'First is not last, and returns false.');

    // numbers
    $span: 4;
    $location: 9;
    $test: is-last($span, $location, $columns);
    @include assert-true($test,
      'Last is properly calculated true based on span and position.');

    $span: 6;
    $location: 3;
    $test: is-last($span, $location, $columns);
    @include assert-false($test,
      'Not-last is properly calculated false based on span and position.');
  }

  // Is First
  // --------

  @include test('[function] is-first') {
    // keyword first
    $test: is-first(first);
    $expect: 1;
    @include assert-equal($test, $expect,
      'First is first, and returns the location "1".');

    // keyword last
    $test: is-first(last);
    @include assert-false($test,
      'Last is not first');

    // number 1
    $test: is-first(1);
    @include assert-true($test,
      '"The number 1 is-first.');

    // other number
    $test: is-first(3);
    @include assert-false($test,
      '"The number 6 is not first');
  }

  // Get Location Position
  // ---------------------

  @include test('[function] get-location-position') {
    $span: 3;
    $columns: 12;

    // number
    $location: 4;
    $test: get-location($span, $location, $columns);
    @include assert-equal($test, $location,
      'A numbered location should be returned without any parsing.');

    // first
    $location: first;
    $test: get-location($span, $location, $columns);
    $expect: 1;
    @include assert-equal($test, $expect,
      'A "first" location should always be in position 1.');

    // last
    $location: last;
    $test: get-location($span, $location, $columns);
    $expect: 10;
    @include assert-equal($test, $expect,
      '"Last" position keyword returns correct location.');
  }

}
