// Column Math Tests
// =================

@include test-module('Column Math') {

  // Is Symmetrical
  // --------------

  @include test('[function] is-symmetrical()') {
    $sym      : 12;
    $asym     : 1 2 4 1 2 1;
    $single   : (4,);

    // symmetrical
    $sym: is-symmetrical($sym);
    @include assert-true($sym,
      'Number is parsed as symmetrical grid.');

    // asymmetrical
    $asym: is-symmetrical($asym);
    @include assert-false($asym,
      'List is parsed as asymmetrical grid.');

    // single-item list
    $single: is-symmetrical($single);
    @include assert-false($single,
      'Single-item list is parsed as asymmetrical grid.');
  }

  // Column Count
  // ------------

  @include test('[function] column-count()') {
    $sym    : 12;
    $asym   : 1 2 4 1 2 1;

    // symmetrical
    $count: column-count($sym);
    @include assert-equal($count, $sym,
      'Symmetrical grid-count is equal to columns setting.');

    // asymmetrical
    $count: column-count($asym);
    $length: length($asym);
    @include assert-equal($count, $length,
      'Asymmetrical grid-count is equal to columns list length.');
  }

  // Column Sum
  // ----------

  @include test('[function] column-sum() — symmetrical') {
    $columns: 9;
    $gutters: .5;

    // default (narrow)
    $sum: column-sum($columns, $gutters);
    $narrow: 13;
    @include assert-equal($sum, $narrow,
      'Symmetrical column-sum properly adds columns and gutters.');

    // explicit (narrow)
    $sum: column-sum($columns, $gutters, narrow);
    $narrow: 13;
    @include assert-equal($sum, $narrow,
      'Narrow column-sum properly adds columns and gutters.');

    // wide
    $sum: column-sum($columns, $gutters, wide);
    $wide: $narrow + $gutters;
    @include assert-equal($sum, $wide,
      'Wide column-sum includes an extra gutter.');

    // wider
    $sum: column-sum($columns, $gutters, wider);
    $wider: $narrow + ($gutters * 2);
    @include assert-equal($sum, $wider,
      'Wider column-sum includes two extra gutters.');
  }

  @include test('[function] column-sum() — asymmetrical') {
    $columns: 1 2 3 1 2;
    $gutters: .25;

    // standard (narrow)
    $sum: column-sum($columns, $gutters);
    $narrow: 10;
    @include assert-equal($sum, $narrow,
      'Asymmetrical column-sum properly adds columns and gutters.');

    // wide
    $sum: column-sum($columns, $gutters, wide);
    $wide: $narrow + $gutters;
    @include assert-equal($sum, $wide,
      'Wide column-sum includes an extra gutter.');

    // wider
    $sum: column-sum($columns, $gutters, wider);
    $wider: $narrow + ($gutters * 2);
    @include assert-equal($sum, $wider,
      'Wider column-sum includes two extra gutters.');
  }

  // Get Columns
  // -----------

  @include test('[function] get-columns()') {
    $span: 3;

    // symmetrical
    $context: 12;
    $test: get-columns($span, 4, $context);
    @include assert-equal($test, $span,
      'Subset is equal to the span.');

    // asymmetrical
    $context: 1 2 3 1 2;
    $test: get-columns($span, 2, $context);
    $expect: 2 3 1;
    @include assert-equal($test, $expect,
      'Subset is an extracted list of span length, starting at location.');

    // asymmetrical (no location)
    $test: get-columns($span, null, $context);
    $expect: 1 2 3;
    @include assert-equal($test, $expect,
      'Asymmetrical context without location returns first-position subset.');
  }

  // Get Column Span Sum
  // -------------------

  @include test('[function] get-column-span-sum()') {
    $span: 3;
    $location: 2;

    // symmetrical
    $columns: 12;
    $gutters: 1/8;
    $test: get-column-span-sum($span, $location, $columns, $gutters);
    $expect: column-sum($span, $gutters);
    @include assert-equal($test, $expect,
      'Symmetrical column-span-sum is equal to column-sum of span.');

    // asymmetrical
    $columns: 1 2 3 2 1 2 3;
    $gutters: 1/4;
    $test: get-column-span-sum($span, $location, $columns, $gutters);
    $expect: 7.5;
    @include assert-equal($test, $expect,
      'Assymetrical column-span-sum fetches subset before calculating sum.');
  }

}

