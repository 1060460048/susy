Susy - Compass Plugin 
=====================

Susy is a semantic CSS framework creator entirely native to
[Compass](http://compass-style.org/).
Susy is an expert at fluid grids in an elastic (or fluid, or fixed) shell that
will never activate that bloody side-scroll bar. Susy sets your width on the
outer element (`container`), adds a `max-width` of `100%` and builds the rest
of your grid in percentages. The philosophy and technique are based on
[Natalie Downe](http://natbat.net/)'s "[CSS
Systems](http://natbat.net/2008/Sep/28/css-systems/)" - which introduces
difficult math in the service of beautiful structure. With the power of
Compass/Sass, Susy will do that math for you.

Using simple mixins, columns can be created, suffixed, prefixed, and nested
easily - and always in flexible percentages.

Install 
=======

    sudo gem sources --add http://gems.github.com/ 
    sudo gem install chriseppstein-compass 
    sudo gem install ericam-compass-susy-plugin

Create a Susy-based Compass Project 
===================================

    compass -r susy -f susy <project name>

Then edit your `_base.sass`, `screen.sass` and `print.sass` files accordingly.
A reset is added automatically.


Tutorial
========

There's an [online tutorial](http://www.oddbird.net/susy/tutorial/) over at
the OddBird site, as well as a Markdown tutorial in Susy's /docs/ folder.


Extra Utility Mixins 
=====================

Extra utilities are included in Susy's `utils.sass` file, with additional list
options, experimental (CSS3/proprietary) CSS, and more.

* `+show-grid(!src)` will remove all your backgrounds and repeat the specified
  grid image on an element. Good for testing your baseline grid.

* `+inline-block-list([!horizontalpadding])` for making lists inline-block
  when floating just won't do the trick.

* `+hide` for hiding content from visual browsers while keeping accessability
  intact.

* `+skip-link([!top = 0, !right, !bottom, !left])` hide a link, and then show
  it again on focus. the TRBL settings allow you to place it absolutely on
  display. Default will be top left of the positioning context.

* `+inline-italic` because some fonts/browsers add line-height when you
  explicitly set italics on an inline element - this takes some away.

And then the fun stuff:

* `+opacity(!opacity)` adds cross-browser opacity settings (takes a range of
  0 to 1).

* `+border-radius(!radius)` (`+border-bottom-left-radius` etc. all work) for
  rounded corners in supporting browsers.

* `+box-sizing(!model)` for setting the box sizing model in supporting
  browsers.

* `+box-shadow(!verticaloffset, !horizontaloffset, !blur, !color)` for
  box-shadow in webkit and CSS3.
