Susy - Compass Plugin
=====================

Susy is a semantic CSS grid system for designers.

Use Susy anywhere. Static sites, Rails sites, Django sites, PHP sites,
etc. You name it. Susy just helps you with the grid - without ever touching 
your markup. 

Melts in the mouth
------------------

Susy grids are always fluid on the inside, but contained in the candy shell of 
your choice (fixed/fluid/elastic). That allows them to flex, react, and move 
as needed.

Built entirely native to [Compass](http://compass-style.org/), Susy is based
on the philosophy and techniques of [Natalie Downe](http://natbat.net/)'s
"[CSS Systems](http://www.slideshare.net/nataliedowne/css-systems-presentation)
" - which introduces difficult math in return for beautiful structure and 
flexibility. 

Susy will do all the math, and let you focus on your designs.

Installation
------------

    sudo gem install compass-susy-plugin
    compass create <project name> -r susy -u susy

Grid Basics
-----------

_(This now refers to the unreleased 1.0 version of Susy.)_

### Settings:

Set up your default grid values: total columns, column width, gutter width, 
and side-gutter width.

```scss
$total-cols         : 12;             /* a 12-column grid */
$col-width          : 4em;            /* each column is 4em wide */
$gutter-width       : 1em;            /* 1em gutters between columns */
$side-gutter-width  : $gutter-width;  /* 1em padding on the entire grid */
```

### Mixins:

The basic grid is composed using two simple mixins:
* Apply the `container` mixin to create your initial grid context. 
* Apply the `columns` mixin to declare the width of an element on the grid.

Use the 'omega' trigger to declare elements that span the _final_ column of 
their parent element, and pass a 'context' in nested situations. The 
'context' for any element is equal to the number of columns spanned by it's 
parent.

For example:

```scss
#page {
  @include container;

  /* 
  full-width items like the header don't need any help from Susy:
  header { ... }
  */

  nav { @include columns(3); }

  #content { 
    @include columns(9 omega);

    #main { @include columns(6,9); }
    aside { @include columns(3 omega,9); }
  }

  footer { clear: both; }
}
```

Layouts and Breakpoints
-----------------------

The point is to change layouts (number of columns in the grid) at breakpoints. If you supply only a breakpoint, Susy will supply the closest layout. If you supply only a layout, Susy will provide the closest breakpoint.

```scss
/* Switch to a 12-column grid when there is room for one. */
@include at-breakpoint(12) { 
  .container { @include container; } 
}

/* At a min-width of 30em, switch to the nearest fitting layout. */
@include at-breakpoint(30em) { 
  .container { @include container; } 
}

/* Between the min-width of 30em and the max-width of 60em, use a 10-column layout. Provide a fallback class for IE. */
@include at-breakpoint(30em 10 60em ie) { 
  .container { @include container; } 
}

/* Create all your container layouts in one go. Each argument accepts min/layout/max/ie, same as at-breakpoint. */
.container { @include container(4,8,12); }
```